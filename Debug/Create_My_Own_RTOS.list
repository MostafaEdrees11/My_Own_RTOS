
Create_My_Own_RTOS.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000128c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080013bc  080013bc  000113bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013f8  080013f8  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080013f8  080013f8  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013f8  080013f8  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013f8  080013f8  000113f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013fc  080013fc  000113fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08001400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000580  20000008  08001408  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  08001408  00020588  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   000041aa  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000acc  00000000  00000000  000241db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000e14  00000000  00000000  00024ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000258  00000000  00000000  00025ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000200  00000000  00000000  00025d18  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000463c  00000000  00000000  00025f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002619  00000000  00000000  0002a554  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00012f7a  00000000  00000000  0002cb6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0003fae7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000007b8  00000000  00000000  0003fb64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	080013a4 	.word	0x080013a4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	080013a4 	.word	0x080013a4

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	6039      	str	r1, [r7, #0]
 800018e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000194:	2b00      	cmp	r3, #0
 8000196:	db0a      	blt.n	80001ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	b2da      	uxtb	r2, r3
 800019c:	490c      	ldr	r1, [pc, #48]	; (80001d0 <__NVIC_SetPriority+0x4c>)
 800019e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a2:	0152      	lsls	r2, r2, #5
 80001a4:	b2d2      	uxtb	r2, r2
 80001a6:	440b      	add	r3, r1
 80001a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001ac:	e00a      	b.n	80001c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	4908      	ldr	r1, [pc, #32]	; (80001d4 <__NVIC_SetPriority+0x50>)
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	f003 030f 	and.w	r3, r3, #15
 80001ba:	3b04      	subs	r3, #4
 80001bc:	0152      	lsls	r2, r2, #5
 80001be:	b2d2      	uxtb	r2, r2
 80001c0:	440b      	add	r3, r1
 80001c2:	761a      	strb	r2, [r3, #24]
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	e000e100 	.word	0xe000e100
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3b01      	subs	r3, #1
 80001e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001e8:	d301      	bcc.n	80001ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80001ea:	2301      	movs	r3, #1
 80001ec:	e00f      	b.n	800020e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <SysTick_Config+0x40>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80001f6:	2107      	movs	r1, #7
 80001f8:	f04f 30ff 	mov.w	r0, #4294967295
 80001fc:	f7ff ffc2 	bl	8000184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <SysTick_Config+0x40>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <SysTick_Config+0x40>)
 8000208:	2207      	movs	r2, #7
 800020a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800020c:	2300      	movs	r3, #0
}
 800020e:	4618      	mov	r0, r3
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	e000e010 	.word	0xe000e010

0800021c <HardFault_Handler>:



/* we make infinite loop for faults to avoid unpredictable thing if a fault is happen */
void HardFault_Handler (void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	while(1)
 8000220:	e7fe      	b.n	8000220 <HardFault_Handler+0x4>

08000222 <MemManage_Handler>:
	{
	}
}

void MemManage_Handler (void)
{
 8000222:	b480      	push	{r7}
 8000224:	af00      	add	r7, sp, #0
	while(1)
 8000226:	e7fe      	b.n	8000226 <MemManage_Handler+0x4>

08000228 <BusFault_Handler>:
	{
	}
}

void BusFault_Handler (void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	while(1)
 800022c:	e7fe      	b.n	800022c <BusFault_Handler+0x4>

0800022e <UsageFault_Handler>:
	{
	}
}

void UsageFault_Handler (void)
{
 800022e:	b480      	push	{r7}
 8000230:	af00      	add	r7, sp, #0
	while(1)
 8000232:	e7fe      	b.n	8000232 <UsageFault_Handler+0x4>

08000234 <SVC_Handler>:
		 	 anything more in the stack to know to get SVC ID
 */
__attribute((naked)) void SVC_Handler(void)
{
	// Check which stack we use before stacking MSP or PSP
	__asm("TST LR, #0x4 \n\t"
 8000234:	f01e 0f04 	tst.w	lr, #4
 8000238:	bf0c      	ite	eq
 800023a:	f3ef 8008 	mrseq	r0, MSP
 800023e:	f3ef 8009 	mrsne	r0, PSP
 8000242:	f000 bbf9 	b.w	8000a38 <OS_SVC_Services>
			"ITE EQ \n\t"
			"MRSEQ R0, MSP \n\t"
			"MRSNE R0, PSP \n\t"
			"B OS_SVC_Services");
}
 8000246:	bf00      	nop

08000248 <HW_init>:


void HW_init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
	 * | we will use __NVIC_SetPriority from core_cm3.h to set the priority                     |
	 * | we will get the priority of PendSV and SysTick from ARMCM3.h                           |
	 * | PendSV_IRQn = -2 --> 14          | SysTick_IRQn = -1 --> 15                            |
	 * ------------------------------------------------------------------------------------------
	 */
	IRQn_Type PendSV_Priority = PendSV_IRQn;
 800024e:	23fe      	movs	r3, #254	; 0xfe
 8000250:	71fb      	strb	r3, [r7, #7]
	IRQn_Type SysTick_Priority = SysTick_IRQn;
 8000252:	23ff      	movs	r3, #255	; 0xff
 8000254:	71bb      	strb	r3, [r7, #6]
	__NVIC_SetPriority(PendSV_Priority, SysTick_Priority);
 8000256:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800025a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800025e:	4611      	mov	r1, r2
 8000260:	4618      	mov	r0, r3
 8000262:	f7ff ff8f 	bl	8000184 <__NVIC_SetPriority>


}
 8000266:	bf00      	nop
 8000268:	3708      	adds	r7, #8
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <Trigger_OS_PendSV>:

void Trigger_OS_PendSV(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <Trigger_OS_PendSV+0x18>)
 8000276:	685b      	ldr	r3, [r3, #4]
 8000278:	4a03      	ldr	r2, [pc, #12]	; (8000288 <Trigger_OS_PendSV+0x18>)
 800027a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800027e:	6053      	str	r3, [r2, #4]
}
 8000280:	bf00      	nop
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr
 8000288:	e000ed00 	.word	0xe000ed00

0800028c <OS_Start_Ticker>:

unsigned int OS_Start_Ticker(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	 * ------------------------------------
	 * | num_counts	-----> 	1 Millisecond |
	 * | num_counts = 8000 count		  |
	 * ------------------------------------
	 */
	return SysTick_Config(8000);
 8000290:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000294:	f7ff ffa0 	bl	80001d8 <SysTick_Config>
 8000298:	4603      	mov	r3, r0
}
 800029a:	4618      	mov	r0, r3
 800029c:	bd80      	pop	{r7, pc}
	...

080002a0 <SysTick_Handler>:

unsigned char SysTick_Led;
void SysTick_Handler(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	SysTick_Led ^= 1;
 80002a4:	4b07      	ldr	r3, [pc, #28]	; (80002c4 <SysTick_Handler+0x24>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	f083 0301 	eor.w	r3, r3, #1
 80002ac:	b2da      	uxtb	r2, r3
 80002ae:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <SysTick_Handler+0x24>)
 80002b0:	701a      	strb	r2, [r3, #0]
	/*
	 * -----------------------------------------------
	 * |Update Waiting Time for each task every tick |
	 * -----------------------------------------------
	 */
	MyRTOS_Update_Waiting_Time();
 80002b2:	f000 fcd3 	bl	8000c5c <MyRTOS_Update_Waiting_Time>
	/*
	 * -----------------------------------
	 * |Decide What task should run Next |
	 * -----------------------------------
	 */
	OS_Decide_What_Next();
 80002b6:	f000 fb6d 	bl	8000994 <OS_Decide_What_Next>
	/*
	 * -----------------------------------------------------------
	 * |Trigger OS_PendSV (Switch Context/Restore for our Tasks) |
	 * -----------------------------------------------------------
	 */
	Trigger_OS_PendSV();
 80002ba:	f7ff ffd9 	bl	8000270 <Trigger_OS_PendSV>
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	20000034 	.word	0x20000034

080002c8 <FIFO_init>:
 * @arguments		: pointer to LIFO, pointer to Buffer, length of buffer
 * @brief			: it's used to initialize the FIFO to be ready to use it.
 **********************************************************************************
 **/
FIFO_Buf_Status FIFO_init (FIFO_Buf_t *P_fifo, FIFO_element_type *buf, uint32_t length)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b085      	sub	sp, #20
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	607a      	str	r2, [r7, #4]
	//check if buffer is reserved at memory or not
	if(buf == NULL)
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d101      	bne.n	80002de <FIFO_init+0x16>
		return FIFO_null;
 80002da:	2303      	movs	r3, #3
 80002dc:	e011      	b.n	8000302 <FIFO_init+0x3a>

	//initialize fifo
	P_fifo->base = buf;
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	68ba      	ldr	r2, [r7, #8]
 80002e2:	601a      	str	r2, [r3, #0]
	P_fifo->tail = P_fifo->base;
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	681a      	ldr	r2, [r3, #0]
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	605a      	str	r2, [r3, #4]
	P_fifo->head = P_fifo->base;
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	681a      	ldr	r2, [r3, #0]
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	609a      	str	r2, [r3, #8]
	P_fifo->length = length;
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	60da      	str	r2, [r3, #12]
	P_fifo->count = 0;
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	2200      	movs	r2, #0
 80002fe:	611a      	str	r2, [r3, #16]

	return FIFO_no_error;
 8000300:	2300      	movs	r3, #0
}
 8000302:	4618      	mov	r0, r3
 8000304:	3714      	adds	r7, #20
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr

0800030c <FIFO_IS_FULL>:
 * @arguments		: pointer to LIFO
 * @brief			: it's used to check if fifo is full or not.
 **********************************************************************************
 **/
FIFO_Buf_Status FIFO_IS_FULL(FIFO_Buf_t *P_fifo)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
	//check if fifo is valid or not.
	if(!P_fifo->base || !P_fifo->tail || !P_fifo->head)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d007      	beq.n	800032c <FIFO_IS_FULL+0x20>
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	685b      	ldr	r3, [r3, #4]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d003      	beq.n	800032c <FIFO_IS_FULL+0x20>
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d101      	bne.n	8000330 <FIFO_IS_FULL+0x24>
		return FIFO_null;
 800032c:	2303      	movs	r3, #3
 800032e:	e008      	b.n	8000342 <FIFO_IS_FULL+0x36>

	if(P_fifo->count == P_fifo->length)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	691a      	ldr	r2, [r3, #16]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	68db      	ldr	r3, [r3, #12]
 8000338:	429a      	cmp	r2, r3
 800033a:	d101      	bne.n	8000340 <FIFO_IS_FULL+0x34>
		return FIFO_full;
 800033c:	2301      	movs	r3, #1
 800033e:	e000      	b.n	8000342 <FIFO_IS_FULL+0x36>

	return FIFO_no_error;
 8000340:	2300      	movs	r3, #0
}
 8000342:	4618      	mov	r0, r3
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr

0800034c <FIFO_IS_EMPTY>:
 * @arguments		: pointer to LIFO
 * @brief			: it's used to check if fifo is empty or not.
 **********************************************************************************
 **/
FIFO_Buf_Status FIFO_IS_EMPTY(FIFO_Buf_t *P_fifo)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
	//check if fifo is valid or not.
	if(!P_fifo->base || !P_fifo->tail || !P_fifo->head)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d007      	beq.n	800036c <FIFO_IS_EMPTY+0x20>
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	685b      	ldr	r3, [r3, #4]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d003      	beq.n	800036c <FIFO_IS_EMPTY+0x20>
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	689b      	ldr	r3, [r3, #8]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d101      	bne.n	8000370 <FIFO_IS_EMPTY+0x24>
		return FIFO_null;
 800036c:	2303      	movs	r3, #3
 800036e:	e006      	b.n	800037e <FIFO_IS_EMPTY+0x32>

	if(P_fifo->count == 0)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	691b      	ldr	r3, [r3, #16]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d101      	bne.n	800037c <FIFO_IS_EMPTY+0x30>
		return FIFO_empty;
 8000378:	2302      	movs	r3, #2
 800037a:	e000      	b.n	800037e <FIFO_IS_EMPTY+0x32>

	return FIFO_no_error;
 800037c:	2300      	movs	r3, #0
}
 800037e:	4618      	mov	r0, r3
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr

08000388 <FIFO_Enqueue_Item>:
 * @arguments		: pointer to LIFO, item value to enqueue it.
 * @brief			: it's used to enqueue value to the fifo.
 **********************************************************************************
 **/
FIFO_Buf_Status FIFO_Enqueue_Item(FIFO_Buf_t *P_fifo, FIFO_element_type item)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	6039      	str	r1, [r7, #0]
	//check if fifo is valid or not.
	if(!P_fifo->base || !P_fifo->tail || !P_fifo->head)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d007      	beq.n	80003aa <FIFO_Enqueue_Item+0x22>
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d003      	beq.n	80003aa <FIFO_Enqueue_Item+0x22>
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	689b      	ldr	r3, [r3, #8]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d101      	bne.n	80003ae <FIFO_Enqueue_Item+0x26>
		return FIFO_null;
 80003aa:	2303      	movs	r3, #3
 80003ac:	e025      	b.n	80003fa <FIFO_Enqueue_Item+0x72>

	//check if fifo is full or not
	if(FIFO_IS_FULL(P_fifo) == FIFO_full)
 80003ae:	6878      	ldr	r0, [r7, #4]
 80003b0:	f7ff ffac 	bl	800030c <FIFO_IS_FULL>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	d101      	bne.n	80003be <FIFO_Enqueue_Item+0x36>
		return FIFO_full;
 80003ba:	2301      	movs	r3, #1
 80003bc:	e01d      	b.n	80003fa <FIFO_Enqueue_Item+0x72>

	//enqueue the item to fifo
	*(P_fifo->head) = item;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	689b      	ldr	r3, [r3, #8]
 80003c2:	683a      	ldr	r2, [r7, #0]
 80003c4:	601a      	str	r2, [r3, #0]
	P_fifo->count++;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	691b      	ldr	r3, [r3, #16]
 80003ca:	1c5a      	adds	r2, r3, #1
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	611a      	str	r2, [r3, #16]

	//check if head at the end of queue or not.
	if(P_fifo->head == (P_fifo->base + P_fifo->length))
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	689a      	ldr	r2, [r3, #8]
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	6819      	ldr	r1, [r3, #0]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	68db      	ldr	r3, [r3, #12]
 80003dc:	009b      	lsls	r3, r3, #2
 80003de:	440b      	add	r3, r1
 80003e0:	429a      	cmp	r2, r3
 80003e2:	d104      	bne.n	80003ee <FIFO_Enqueue_Item+0x66>
		P_fifo->head = P_fifo->base;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	609a      	str	r2, [r3, #8]
 80003ec:	e004      	b.n	80003f8 <FIFO_Enqueue_Item+0x70>
	else
		P_fifo->head++;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	689b      	ldr	r3, [r3, #8]
 80003f2:	1d1a      	adds	r2, r3, #4
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	609a      	str	r2, [r3, #8]

	return FIFO_no_error;
 80003f8:	2300      	movs	r3, #0
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <FIFO_Dequeue_Item>:
 * @arguments		: pointer to LIFO, pointer to the item dequeued from fifo.
 * @brief			: it's used to dequeue value from the fifo.
 **********************************************************************************
 **/
FIFO_Buf_Status FIFO_Dequeue_Item(FIFO_Buf_t *P_fifo, FIFO_element_type *item)
{
 8000402:	b580      	push	{r7, lr}
 8000404:	b082      	sub	sp, #8
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
 800040a:	6039      	str	r1, [r7, #0]
	//check if fifo is valid or not.
	if(!P_fifo->base || !P_fifo->tail || !P_fifo->head)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d007      	beq.n	8000424 <FIFO_Dequeue_Item+0x22>
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d003      	beq.n	8000424 <FIFO_Dequeue_Item+0x22>
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d101      	bne.n	8000428 <FIFO_Dequeue_Item+0x26>
		return FIFO_null;
 8000424:	2303      	movs	r3, #3
 8000426:	e026      	b.n	8000476 <FIFO_Dequeue_Item+0x74>

	//check if the fifo is empty or not.
	if(FIFO_IS_EMPTY(P_fifo) == FIFO_empty)
 8000428:	6878      	ldr	r0, [r7, #4]
 800042a:	f7ff ff8f 	bl	800034c <FIFO_IS_EMPTY>
 800042e:	4603      	mov	r3, r0
 8000430:	2b02      	cmp	r3, #2
 8000432:	d101      	bne.n	8000438 <FIFO_Dequeue_Item+0x36>
		return FIFO_empty;
 8000434:	2302      	movs	r3, #2
 8000436:	e01e      	b.n	8000476 <FIFO_Dequeue_Item+0x74>

	//dequeue the item from fifo
	*item = *(P_fifo->tail);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	601a      	str	r2, [r3, #0]
	P_fifo->count--;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	691b      	ldr	r3, [r3, #16]
 8000446:	1e5a      	subs	r2, r3, #1
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	611a      	str	r2, [r3, #16]

	//check if tail at the end of queue or not.
	if(P_fifo->tail == (P_fifo->base + P_fifo->length))
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	685a      	ldr	r2, [r3, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	6819      	ldr	r1, [r3, #0]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	68db      	ldr	r3, [r3, #12]
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	440b      	add	r3, r1
 800045c:	429a      	cmp	r2, r3
 800045e:	d104      	bne.n	800046a <FIFO_Dequeue_Item+0x68>
		P_fifo->tail = P_fifo->base;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681a      	ldr	r2, [r3, #0]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	e004      	b.n	8000474 <FIFO_Dequeue_Item+0x72>
	else
		P_fifo->tail++;
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	685b      	ldr	r3, [r3, #4]
 800046e:	1d1a      	adds	r2, r3, #4
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	605a      	str	r2, [r3, #4]

	return FIFO_no_error;
 8000474:	2300      	movs	r3, #0
}
 8000476:	4618      	mov	r0, r3
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
	...

08000480 <PendSV_Handler>:
	 * |  R2   |
	 * |  R1   |
	 * |  R0   |	<-- Current PSP
	 * |-------|
	 */
	OS_Get_PSP_Val(OS_Control_t.Current_Task->Current_PSP_Task);
 8000480:	4b6f      	ldr	r3, [pc, #444]	; (8000640 <PendSV_Handler+0x1c0>)
 8000482:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000486:	f3ef 8009 	mrs	r0, PSP
 800048a:	4602      	mov	r2, r0
 800048c:	619a      	str	r2, [r3, #24]
	 * |  R9   |
	 * |  R10  |
	 * |  R11  |
	 * |-------|
	 */
	OS_Control_t.Current_Task->Current_PSP_Task--;
 800048e:	4b6c      	ldr	r3, [pc, #432]	; (8000640 <PendSV_Handler+0x1c0>)
 8000490:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000494:	699a      	ldr	r2, [r3, #24]
 8000496:	3a04      	subs	r2, #4
 8000498:	619a      	str	r2, [r3, #24]
	__asm volatile ("MOV %[OUT], R4" : [OUT] "=r" ((*OS_Control_t.Current_Task->Current_PSP_Task))); //R4
 800049a:	4b69      	ldr	r3, [pc, #420]	; (8000640 <PendSV_Handler+0x1c0>)
 800049c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	4622      	mov	r2, r4
 80004a4:	601a      	str	r2, [r3, #0]

	OS_Control_t.Current_Task->Current_PSP_Task--;
 80004a6:	4b66      	ldr	r3, [pc, #408]	; (8000640 <PendSV_Handler+0x1c0>)
 80004a8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004ac:	699a      	ldr	r2, [r3, #24]
 80004ae:	3a04      	subs	r2, #4
 80004b0:	619a      	str	r2, [r3, #24]
	__asm volatile ("MOV %[OUT], R5" : [OUT] "=r" ((*OS_Control_t.Current_Task->Current_PSP_Task))); //R5
 80004b2:	4b63      	ldr	r3, [pc, #396]	; (8000640 <PendSV_Handler+0x1c0>)
 80004b4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	462a      	mov	r2, r5
 80004bc:	601a      	str	r2, [r3, #0]

	OS_Control_t.Current_Task->Current_PSP_Task--;
 80004be:	4b60      	ldr	r3, [pc, #384]	; (8000640 <PendSV_Handler+0x1c0>)
 80004c0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004c4:	699a      	ldr	r2, [r3, #24]
 80004c6:	3a04      	subs	r2, #4
 80004c8:	619a      	str	r2, [r3, #24]
	__asm volatile ("MOV %[OUT], R6" : [OUT] "=r" ((*OS_Control_t.Current_Task->Current_PSP_Task))); //R6
 80004ca:	4b5d      	ldr	r3, [pc, #372]	; (8000640 <PendSV_Handler+0x1c0>)
 80004cc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	4632      	mov	r2, r6
 80004d4:	601a      	str	r2, [r3, #0]

	OS_Control_t.Current_Task->Current_PSP_Task--;
 80004d6:	4b5a      	ldr	r3, [pc, #360]	; (8000640 <PendSV_Handler+0x1c0>)
 80004d8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004dc:	699a      	ldr	r2, [r3, #24]
 80004de:	3a04      	subs	r2, #4
 80004e0:	619a      	str	r2, [r3, #24]
	__asm volatile ("MOV %[OUT], R7" : [OUT] "=r" ((*OS_Control_t.Current_Task->Current_PSP_Task))); //R7
 80004e2:	4b57      	ldr	r3, [pc, #348]	; (8000640 <PendSV_Handler+0x1c0>)
 80004e4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	463a      	mov	r2, r7
 80004ec:	601a      	str	r2, [r3, #0]

	OS_Control_t.Current_Task->Current_PSP_Task--;
 80004ee:	4b54      	ldr	r3, [pc, #336]	; (8000640 <PendSV_Handler+0x1c0>)
 80004f0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004f4:	699a      	ldr	r2, [r3, #24]
 80004f6:	3a04      	subs	r2, #4
 80004f8:	619a      	str	r2, [r3, #24]
	__asm volatile ("MOV %[OUT], R8" : [OUT] "=r" ((*OS_Control_t.Current_Task->Current_PSP_Task))); //R8
 80004fa:	4b51      	ldr	r3, [pc, #324]	; (8000640 <PendSV_Handler+0x1c0>)
 80004fc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	4642      	mov	r2, r8
 8000504:	601a      	str	r2, [r3, #0]

	OS_Control_t.Current_Task->Current_PSP_Task--;
 8000506:	4b4e      	ldr	r3, [pc, #312]	; (8000640 <PendSV_Handler+0x1c0>)
 8000508:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800050c:	699a      	ldr	r2, [r3, #24]
 800050e:	3a04      	subs	r2, #4
 8000510:	619a      	str	r2, [r3, #24]
	__asm volatile ("MOV %[OUT], R9" : [OUT] "=r" ((*OS_Control_t.Current_Task->Current_PSP_Task))); //R9
 8000512:	4b4b      	ldr	r3, [pc, #300]	; (8000640 <PendSV_Handler+0x1c0>)
 8000514:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	464a      	mov	r2, r9
 800051c:	601a      	str	r2, [r3, #0]

	OS_Control_t.Current_Task->Current_PSP_Task--;
 800051e:	4b48      	ldr	r3, [pc, #288]	; (8000640 <PendSV_Handler+0x1c0>)
 8000520:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000524:	699a      	ldr	r2, [r3, #24]
 8000526:	3a04      	subs	r2, #4
 8000528:	619a      	str	r2, [r3, #24]
	__asm volatile ("MOV %[OUT], R10" : [OUT] "=r" ((*OS_Control_t.Current_Task->Current_PSP_Task))); //R10
 800052a:	4b45      	ldr	r3, [pc, #276]	; (8000640 <PendSV_Handler+0x1c0>)
 800052c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	4652      	mov	r2, sl
 8000534:	601a      	str	r2, [r3, #0]

	OS_Control_t.Current_Task->Current_PSP_Task--;
 8000536:	4b42      	ldr	r3, [pc, #264]	; (8000640 <PendSV_Handler+0x1c0>)
 8000538:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800053c:	699a      	ldr	r2, [r3, #24]
 800053e:	3a04      	subs	r2, #4
 8000540:	619a      	str	r2, [r3, #24]
	__asm volatile ("MOV %[OUT], R11" : [OUT] "=r" ((*OS_Control_t.Current_Task->Current_PSP_Task))); //R11
 8000542:	4b3f      	ldr	r3, [pc, #252]	; (8000640 <PendSV_Handler+0x1c0>)
 8000544:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	465a      	mov	r2, fp
 800054c:	601a      	str	r2, [r3, #0]
	/*
	 * ----------------------------------------
	 * | Restore The Context of the Next task |
	 * ----------------------------------------
	 */
	if(OS_Control_t.Next_Task != NULL)
 800054e:	4b3c      	ldr	r3, [pc, #240]	; (8000640 <PendSV_Handler+0x1c0>)
 8000550:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000554:	2b00      	cmp	r3, #0
 8000556:	d009      	beq.n	800056c <PendSV_Handler+0xec>
	{
		OS_Control_t.Current_Task = OS_Control_t.Next_Task;
 8000558:	4b39      	ldr	r3, [pc, #228]	; (8000640 <PendSV_Handler+0x1c0>)
 800055a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800055e:	4a38      	ldr	r2, [pc, #224]	; (8000640 <PendSV_Handler+0x1c0>)
 8000560:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
		OS_Control_t.Next_Task = NULL;
 8000564:	4b36      	ldr	r3, [pc, #216]	; (8000640 <PendSV_Handler+0x1c0>)
 8000566:	2200      	movs	r2, #0
 8000568:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	 * |  R9   |
	 * |  R10  |
	 * |  R11  |		<-- Current_PSP_Task
	 * |-------|
	 */
	__asm volatile ("MOV R11, %[IN]" : : [IN] "r" ((*OS_Control_t.Current_Task->Current_PSP_Task))); //R11
 800056c:	4b34      	ldr	r3, [pc, #208]	; (8000640 <PendSV_Handler+0x1c0>)
 800056e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	469b      	mov	fp, r3
	OS_Control_t.Current_Task->Current_PSP_Task++;
 8000578:	4b31      	ldr	r3, [pc, #196]	; (8000640 <PendSV_Handler+0x1c0>)
 800057a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800057e:	699a      	ldr	r2, [r3, #24]
 8000580:	3204      	adds	r2, #4
 8000582:	619a      	str	r2, [r3, #24]

	__asm volatile ("MOV R10, %[IN]" : : [IN] "r" ((*OS_Control_t.Current_Task->Current_PSP_Task))); //R10
 8000584:	4b2e      	ldr	r3, [pc, #184]	; (8000640 <PendSV_Handler+0x1c0>)
 8000586:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	469a      	mov	sl, r3
	OS_Control_t.Current_Task->Current_PSP_Task++;
 8000590:	4b2b      	ldr	r3, [pc, #172]	; (8000640 <PendSV_Handler+0x1c0>)
 8000592:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000596:	699a      	ldr	r2, [r3, #24]
 8000598:	3204      	adds	r2, #4
 800059a:	619a      	str	r2, [r3, #24]

	__asm volatile ("MOV R9, %[IN]" : : [IN] "r" ((*OS_Control_t.Current_Task->Current_PSP_Task))); //R9
 800059c:	4b28      	ldr	r3, [pc, #160]	; (8000640 <PendSV_Handler+0x1c0>)
 800059e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4699      	mov	r9, r3
	OS_Control_t.Current_Task->Current_PSP_Task++;
 80005a8:	4b25      	ldr	r3, [pc, #148]	; (8000640 <PendSV_Handler+0x1c0>)
 80005aa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005ae:	699a      	ldr	r2, [r3, #24]
 80005b0:	3204      	adds	r2, #4
 80005b2:	619a      	str	r2, [r3, #24]

	__asm volatile ("MOV R8, %[IN]" : : [IN] "r" ((*OS_Control_t.Current_Task->Current_PSP_Task))); //R8
 80005b4:	4b22      	ldr	r3, [pc, #136]	; (8000640 <PendSV_Handler+0x1c0>)
 80005b6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4698      	mov	r8, r3
	OS_Control_t.Current_Task->Current_PSP_Task++;
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <PendSV_Handler+0x1c0>)
 80005c2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005c6:	699a      	ldr	r2, [r3, #24]
 80005c8:	3204      	adds	r2, #4
 80005ca:	619a      	str	r2, [r3, #24]

	__asm volatile ("MOV R7, %[IN]" : : [IN] "r" ((*OS_Control_t.Current_Task->Current_PSP_Task))); //R7
 80005cc:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <PendSV_Handler+0x1c0>)
 80005ce:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	461f      	mov	r7, r3
	OS_Control_t.Current_Task->Current_PSP_Task++;
 80005d8:	4b19      	ldr	r3, [pc, #100]	; (8000640 <PendSV_Handler+0x1c0>)
 80005da:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005de:	699a      	ldr	r2, [r3, #24]
 80005e0:	3204      	adds	r2, #4
 80005e2:	619a      	str	r2, [r3, #24]

	__asm volatile ("MOV R6, %[IN]" : : [IN] "r" ((*OS_Control_t.Current_Task->Current_PSP_Task))); //R6
 80005e4:	4b16      	ldr	r3, [pc, #88]	; (8000640 <PendSV_Handler+0x1c0>)
 80005e6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	461e      	mov	r6, r3
	OS_Control_t.Current_Task->Current_PSP_Task++;
 80005f0:	4b13      	ldr	r3, [pc, #76]	; (8000640 <PendSV_Handler+0x1c0>)
 80005f2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005f6:	699a      	ldr	r2, [r3, #24]
 80005f8:	3204      	adds	r2, #4
 80005fa:	619a      	str	r2, [r3, #24]

	__asm volatile ("MOV R5, %[IN]" : : [IN] "r" ((*OS_Control_t.Current_Task->Current_PSP_Task))); //R5
 80005fc:	4b10      	ldr	r3, [pc, #64]	; (8000640 <PendSV_Handler+0x1c0>)
 80005fe:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	461d      	mov	r5, r3
	OS_Control_t.Current_Task->Current_PSP_Task++;
 8000608:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <PendSV_Handler+0x1c0>)
 800060a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800060e:	699a      	ldr	r2, [r3, #24]
 8000610:	3204      	adds	r2, #4
 8000612:	619a      	str	r2, [r3, #24]

	__asm volatile ("MOV R4, %[IN]" : : [IN] "r" ((*OS_Control_t.Current_Task->Current_PSP_Task))); //R4
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <PendSV_Handler+0x1c0>)
 8000616:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	461c      	mov	r4, r3
	OS_Control_t.Current_Task->Current_PSP_Task++;
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <PendSV_Handler+0x1c0>)
 8000622:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000626:	699a      	ldr	r2, [r3, #24]
 8000628:	3204      	adds	r2, #4
 800062a:	619a      	str	r2, [r3, #24]

	/*
	 * 2.Set PSP with Current_PSP_Task
	 */
	OS_Set_PSP_Val(OS_Control_t.Current_Task->Current_PSP_Task);
 800062c:	4b04      	ldr	r3, [pc, #16]	; (8000640 <PendSV_Handler+0x1c0>)
 800062e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4618      	mov	r0, r3
 8000636:	f380 8809 	msr	PSP, r0

	/*
	 * 4. Branch to LR to return from Interrupt handler
	 * LR --> contain EXC_RETURN Code
	 */
	__asm("BX LR");
 800063a:	4770      	bx	lr
}
 800063c:	bf00      	nop
 800063e:	bf00      	nop
 8000640:	20000050 	.word	0x20000050

08000644 <MyRTOS_Create_MainStack>:
 * Function [IN] : none
 * Function [OUT]: none
 * Usage         : it's used to limit the bounds of Main Stack that we will use it for OS & Interrupts
 */
void MyRTOS_Create_MainStack(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
	OS_Control_t._S_MSP_OS = (unsigned int)(&_estack);
 8000648:	4a0b      	ldr	r2, [pc, #44]	; (8000678 <MyRTOS_Create_MainStack+0x34>)
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <MyRTOS_Create_MainStack+0x38>)
 800064c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control_t._E_MSP_OS = (OS_Control_t._S_MSP_OS - Main_Stack_Size);
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <MyRTOS_Create_MainStack+0x38>)
 8000652:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000656:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 800065a:	4a08      	ldr	r2, [pc, #32]	; (800067c <MyRTOS_Create_MainStack+0x38>)
 800065c:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194

	//Aligned 8 bytes spaces between MSP (OS) and PSP (Tasks)
	OS_Control_t.PSP_Task_Locator = (OS_Control_t._E_MSP_OS - 8);
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <MyRTOS_Create_MainStack+0x38>)
 8000662:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000666:	3b08      	subs	r3, #8
 8000668:	4a04      	ldr	r2, [pc, #16]	; (800067c <MyRTOS_Create_MainStack+0x38>)
 800066a:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
}
 800066e:	bf00      	nop
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	20005000 	.word	0x20005000
 800067c:	20000050 	.word	0x20000050

08000680 <IDLE_TASK_FUNC>:
 * Function [IN] : none
 * Function [OUT]: none
 * Usage         : it's the function of the idle task that will executed when no task is running
 */
void IDLE_TASK_FUNC(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
	while(1)
	{
		IDLE_Task_Led ^= 1;
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <IDLE_TASK_FUNC+0x18>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	f083 0301 	eor.w	r3, r3, #1
 800068c:	b2da      	uxtb	r2, r3
 800068e:	4b02      	ldr	r3, [pc, #8]	; (8000698 <IDLE_TASK_FUNC+0x18>)
 8000690:	701a      	strb	r2, [r3, #0]
		__asm("WFE");
 8000692:	bf20      	wfe
		IDLE_Task_Led ^= 1;
 8000694:	e7f6      	b.n	8000684 <IDLE_TASK_FUNC+0x4>
 8000696:	bf00      	nop
 8000698:	20000038 	.word	0x20000038

0800069c <MYRTOS_init>:
 * Function [IN] : none
 * Function [OUT]: it's return the error state of function to check with it if any error happens
 * Usage         : it's used to initialize RTOS like create main task & configure idle task
 */
MYRTOS_ES_t MYRTOS_init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
	MYRTOS_ES_t Local_enuErrorState = ES_NoError;
 80006a2:	2300      	movs	r3, #0
 80006a4:	71fb      	strb	r3, [r7, #7]

	//Updata OS Mode --> OS_Suspend
	OS_Control_t.OS_State = OS_Suspend;
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MYRTOS_init+0x5c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//Specify the Main Stack for OS
	MyRTOS_Create_MainStack();
 80006ae:	f7ff ffc9 	bl	8000644 <MyRTOS_Create_MainStack>

	//Create OS Ready Queue
	if(FIFO_init(&Ready_Queue, Ready_Queue_FIFO, Max_Num_of_Tasks) != FIFO_no_error)
 80006b2:	2264      	movs	r2, #100	; 0x64
 80006b4:	4911      	ldr	r1, [pc, #68]	; (80006fc <MYRTOS_init+0x60>)
 80006b6:	4812      	ldr	r0, [pc, #72]	; (8000700 <MYRTOS_init+0x64>)
 80006b8:	f7ff fe06 	bl	80002c8 <FIFO_init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MYRTOS_init+0x2a>
	{
		Local_enuErrorState = ES_Ready_Queue_Init_Error;
 80006c2:	2301      	movs	r3, #1
 80006c4:	71fb      	strb	r3, [r7, #7]
	}

	//Configure IDLE Task
	strcpy(MyRTOS_IDLE_TASK.Task_Name, "Idle_Task");
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MYRTOS_init+0x68>)
 80006c8:	4a0f      	ldr	r2, [pc, #60]	; (8000708 <MYRTOS_init+0x6c>)
 80006ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80006cc:	c303      	stmia	r3!, {r0, r1}
 80006ce:	801a      	strh	r2, [r3, #0]
	MyRTOS_IDLE_TASK.Task_Priority = 255;
 80006d0:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MYRTOS_init+0x70>)
 80006d2:	22ff      	movs	r2, #255	; 0xff
 80006d4:	711a      	strb	r2, [r3, #4]
	MyRTOS_IDLE_TASK.PF_Task_Entry = IDLE_TASK_FUNC;
 80006d6:	4b0d      	ldr	r3, [pc, #52]	; (800070c <MYRTOS_init+0x70>)
 80006d8:	4a0d      	ldr	r2, [pc, #52]	; (8000710 <MYRTOS_init+0x74>)
 80006da:	609a      	str	r2, [r3, #8]
	MyRTOS_IDLE_TASK.Task_Stack_Size = 300;
 80006dc:	4b0b      	ldr	r3, [pc, #44]	; (800070c <MYRTOS_init+0x70>)
 80006de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80006e2:	601a      	str	r2, [r3, #0]

	Local_enuErrorState = MyRTOS_Create_Task(&MyRTOS_IDLE_TASK);
 80006e4:	4809      	ldr	r0, [pc, #36]	; (800070c <MYRTOS_init+0x70>)
 80006e6:	f000 f853 	bl	8000790 <MyRTOS_Create_Task>
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]

	return Local_enuErrorState;
 80006ee:	79fb      	ldrb	r3, [r7, #7]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000050 	.word	0x20000050
 80006fc:	20000240 	.word	0x20000240
 8000700:	2000003c 	.word	0x2000003c
 8000704:	20000218 	.word	0x20000218
 8000708:	080013bc 	.word	0x080013bc
 800070c:	200001fc 	.word	0x200001fc
 8000710:	08000681 	.word	0x08000681

08000714 <MyRTOS_Create_Task_Stack>:
 * Function [IN] : it takes a pointer to task that we need to create a task for it
 * Function [OUT]: none
 * Usage         : it's used to limit the bounds of Process Stack that we will use it for this task
 */
void MyRTOS_Create_Task_Stack(Task_Ref_t *Task_Ref_CFG)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	 * |  R10  |
	 * |  R11  |
	 * |-------|
	 */

	Task_Ref_CFG->Current_PSP_Task = (unsigned int *)(Task_Ref_CFG->_S_PSP_Task);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	691b      	ldr	r3, [r3, #16]
 8000720:	461a      	mov	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	619a      	str	r2, [r3, #24]

	Task_Ref_CFG->Current_PSP_Task--;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	699b      	ldr	r3, [r3, #24]
 800072a:	1f1a      	subs	r2, r3, #4
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	619a      	str	r2, [r3, #24]
	*(Task_Ref_CFG->Current_PSP_Task) = 0x01000000;	//DUMMY xPSR --> you must put T = 1 to avoid Bus Fault (Thumb2 Technology)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000738:	601a      	str	r2, [r3, #0]

	Task_Ref_CFG->Current_PSP_Task--;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	1f1a      	subs	r2, r3, #4
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	619a      	str	r2, [r3, #24]
	*(Task_Ref_CFG->Current_PSP_Task) = (unsigned int)(Task_Ref_CFG->PF_Task_Entry);	//DUMMY PC
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	689a      	ldr	r2, [r3, #8]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	601a      	str	r2, [r3, #0]

	Task_Ref_CFG->Current_PSP_Task--;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	1f1a      	subs	r2, r3, #4
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	619a      	str	r2, [r3, #24]
	*(Task_Ref_CFG->Current_PSP_Task) = 0xFFFFFFFD;	//DUMMY LR --> (EXECUTION RETURN CODE --> Thread Mode, PSP)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f06f 0202 	mvn.w	r2, #2
 8000760:	601a      	str	r2, [r3, #0]

	//Still 13 General Purpose Register --> We dummy them to 0
	for(int i = 0; i < 13; i++)
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	e00b      	b.n	8000780 <MyRTOS_Create_Task_Stack+0x6c>
	{
		Task_Ref_CFG->Current_PSP_Task--;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	1f1a      	subs	r2, r3, #4
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	619a      	str	r2, [r3, #24]
		*(Task_Ref_CFG->Current_PSP_Task) = 0;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 13; i++)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	3301      	adds	r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2b0c      	cmp	r3, #12
 8000784:	ddf0      	ble.n	8000768 <MyRTOS_Create_Task_Stack+0x54>
	}

}
 8000786:	bf00      	nop
 8000788:	3714      	adds	r7, #20
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr

08000790 <MyRTOS_Create_Task>:
 * Function [IN] : it takes a pointer to task configuration that we need to create task it
 * Function [OUT]: it's return the error state of function to check with it if any error happens
 * Usage         : we use it to create task such as create its stack and configure its state
 */
MYRTOS_ES_t MyRTOS_Create_Task(Task_Ref_t *Task_Ref_Config)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	MYRTOS_ES_t Local_enuErrorState = ES_NoError;
 8000798:	2300      	movs	r3, #0
 800079a:	73fb      	strb	r3, [r7, #15]
	 * | _eheap    |
	 * -------------
	 */

	// Check if task stack size exceeded the PSP stack size
	if(((OS_Control_t.PSP_Task_Locator - Task_Ref_Config->Task_Stack_Size) < (unsigned int)(&_eheap)))
 800079c:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MyRTOS_Create_Task+0x7c>)
 800079e:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	1ad3      	subs	r3, r2, r3
 80007a8:	4a19      	ldr	r2, [pc, #100]	; (8000810 <MyRTOS_Create_Task+0x80>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d201      	bcs.n	80007b2 <MyRTOS_Create_Task+0x22>
	{
		Local_enuErrorState = ES_Error_Task_Exceeded_Stack_Size;
 80007ae:	2302      	movs	r3, #2
 80007b0:	73fb      	strb	r3, [r7, #15]
	}

	if(Local_enuErrorState == ES_NoError)
 80007b2:	7bfb      	ldrb	r3, [r7, #15]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d111      	bne.n	80007dc <MyRTOS_Create_Task+0x4c>
	{
		//Create Its Own PSP Stack
		Task_Ref_Config->_S_PSP_Task = OS_Control_t.PSP_Task_Locator;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MyRTOS_Create_Task+0x7c>)
 80007ba:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	611a      	str	r2, [r3, #16]
		Task_Ref_Config->_E_PSP_Task = (Task_Ref_Config->_S_PSP_Task - Task_Ref_Config->Task_Stack_Size);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	691a      	ldr	r2, [r3, #16]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	1ad2      	subs	r2, r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	615a      	str	r2, [r3, #20]

		//Aligned 8 bytes spaces between PSP (Task) and PSP (Other Task)
		OS_Control_t.PSP_Task_Locator = (Task_Ref_Config->_E_PSP_Task - 8);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	695b      	ldr	r3, [r3, #20]
 80007d4:	3b08      	subs	r3, #8
 80007d6:	4a0d      	ldr	r2, [pc, #52]	; (800080c <MyRTOS_Create_Task+0x7c>)
 80007d8:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	}

	//Initialize PSP Task Stack
	MyRTOS_Create_Task_Stack(Task_Ref_Config);
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ff99 	bl	8000714 <MyRTOS_Create_Task_Stack>

	//Task State Update --> Suspend State
	Task_Ref_Config->Task_State = Suspend_State;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2200      	movs	r2, #0
 80007e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	//Add Task to Scheduler Table
	OS_Control_t.OS_Tasks[OS_Control_t.No_of_Active_Tasks++] = Task_Ref_Config;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MyRTOS_Create_Task+0x7c>)
 80007ec:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80007f0:	1c5a      	adds	r2, r3, #1
 80007f2:	4906      	ldr	r1, [pc, #24]	; (800080c <MyRTOS_Create_Task+0x7c>)
 80007f4:	f8c1 219c 	str.w	r2, [r1, #412]	; 0x19c
 80007f8:	4904      	ldr	r1, [pc, #16]	; (800080c <MyRTOS_Create_Task+0x7c>)
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return Local_enuErrorState;
 8000800:	7bfb      	ldrb	r3, [r7, #15]
}
 8000802:	4618      	mov	r0, r3
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000050 	.word	0x20000050
 8000810:	20000b88 	.word	0x20000b88

08000814 <Bubble_Sort_Tasks>:
 * Function [IN] : none
 * Function [OUT]: none
 * Usage         : it's used to sort the tasks on scheduler table based on the priority of each task
 */
void Bubble_Sort_Tasks(void)
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
	unsigned int i, j, Num_Tasks;
	Task_Ref_t *Temp;

	Num_Tasks = OS_Control_t.No_of_Active_Tasks;
 800081a:	4b20      	ldr	r3, [pc, #128]	; (800089c <Bubble_Sort_Tasks+0x88>)
 800081c:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000820:	607b      	str	r3, [r7, #4]

	for(i = 0; i < Num_Tasks; i++)
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	e030      	b.n	800088a <Bubble_Sort_Tasks+0x76>
	{
		for(j = 0; j < Num_Tasks - i - 1; j++)
 8000828:	2300      	movs	r3, #0
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	e023      	b.n	8000876 <Bubble_Sort_Tasks+0x62>
		{
			if(OS_Control_t.OS_Tasks[j]->Task_Priority > OS_Control_t.OS_Tasks[j+1]->Task_Priority)
 800082e:	4a1b      	ldr	r2, [pc, #108]	; (800089c <Bubble_Sort_Tasks+0x88>)
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000836:	791a      	ldrb	r2, [r3, #4]
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	3301      	adds	r3, #1
 800083c:	4917      	ldr	r1, [pc, #92]	; (800089c <Bubble_Sort_Tasks+0x88>)
 800083e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000842:	791b      	ldrb	r3, [r3, #4]
 8000844:	429a      	cmp	r2, r3
 8000846:	d913      	bls.n	8000870 <Bubble_Sort_Tasks+0x5c>
			{
				Temp = OS_Control_t.OS_Tasks[j];
 8000848:	4a14      	ldr	r2, [pc, #80]	; (800089c <Bubble_Sort_Tasks+0x88>)
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000850:	603b      	str	r3, [r7, #0]
				OS_Control_t.OS_Tasks[j] = OS_Control_t.OS_Tasks[j+1];
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	3301      	adds	r3, #1
 8000856:	4a11      	ldr	r2, [pc, #68]	; (800089c <Bubble_Sort_Tasks+0x88>)
 8000858:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800085c:	490f      	ldr	r1, [pc, #60]	; (800089c <Bubble_Sort_Tasks+0x88>)
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control_t.OS_Tasks[j+1] = Temp;
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	3301      	adds	r3, #1
 8000868:	490c      	ldr	r1, [pc, #48]	; (800089c <Bubble_Sort_Tasks+0x88>)
 800086a:	683a      	ldr	r2, [r7, #0]
 800086c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(j = 0; j < Num_Tasks - i - 1; j++)
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	3301      	adds	r3, #1
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	3b01      	subs	r3, #1
 800087e:	68ba      	ldr	r2, [r7, #8]
 8000880:	429a      	cmp	r2, r3
 8000882:	d3d4      	bcc.n	800082e <Bubble_Sort_Tasks+0x1a>
	for(i = 0; i < Num_Tasks; i++)
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	3301      	adds	r3, #1
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fa      	ldr	r2, [r7, #12]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	429a      	cmp	r2, r3
 8000890:	d3ca      	bcc.n	8000828 <Bubble_Sort_Tasks+0x14>
			}
		}
	}
}
 8000892:	bf00      	nop
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr
 800089c:	20000050 	.word	0x20000050

080008a0 <MyRTOS_Update_Scheduler_Tabel>:
 * Function [IN] : none
 * Function [OUT]: it's return the error state of function to check with it if any error happens
 * Usage         : it's used to update scheduler table and rearrange the tasks in the table
 */
MYRTOS_ES_t MyRTOS_Update_Scheduler_Tabel(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
	MYRTOS_ES_t Local_enuErrorState = ES_NoError;
 80008a6:	2300      	movs	r3, #0
 80008a8:	71fb      	strb	r3, [r7, #7]

	//Sort Scheduler Table (OS_Control --> Tasks[100]) --> with Bubble Sort
	//Base on Priority --> (high priority(low number) then low priority(high number))
	Bubble_Sort_Tasks();
 80008aa:	f7ff ffb3 	bl	8000814 <Bubble_Sort_Tasks>

	return Local_enuErrorState;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <MyRTOS_Update_Ready_Queue>:
 * Function [IN] : none
 * Function [OUT]: it's return the error state of function to check with it if any error happens
 * Usage         : it's used to update ready queue and add to it the tasks that should be in ready state
 */
MYRTOS_ES_t MyRTOS_Update_Ready_Queue(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
	MYRTOS_ES_t Local_enuErrorState = ES_NoError;
 80008be:	2300      	movs	r3, #0
 80008c0:	75fb      	strb	r3, [r7, #23]

	Task_Ref_t *Top_Ready_Queue = NULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
	unsigned int i = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]

	Task_Ref_t *P_Curr_Task = NULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
	Task_Ref_t *P_Next_Task = NULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]

	//Free Ready Queue
	while(FIFO_Dequeue_Item(&Ready_Queue, &Top_Ready_Queue) != FIFO_empty);
 80008d2:	bf00      	nop
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	4619      	mov	r1, r3
 80008d8:	482c      	ldr	r0, [pc, #176]	; (800098c <MyRTOS_Update_Ready_Queue+0xd4>)
 80008da:	f7ff fd92 	bl	8000402 <FIFO_Dequeue_Item>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b02      	cmp	r3, #2
 80008e2:	d1f7      	bne.n	80008d4 <MyRTOS_Update_Ready_Queue+0x1c>

	//Update Ready Queue
	while(i < OS_Control_t.No_of_Active_Tasks)
 80008e4:	e046      	b.n	8000974 <MyRTOS_Update_Ready_Queue+0xbc>
	{
		P_Curr_Task = OS_Control_t.OS_Tasks[i];
 80008e6:	4a2a      	ldr	r2, [pc, #168]	; (8000990 <MyRTOS_Update_Ready_Queue+0xd8>)
 80008e8:	693b      	ldr	r3, [r7, #16]
 80008ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ee:	60fb      	str	r3, [r7, #12]
		P_Next_Task = OS_Control_t.OS_Tasks[i+1];
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	3301      	adds	r3, #1
 80008f4:	4a26      	ldr	r2, [pc, #152]	; (8000990 <MyRTOS_Update_Ready_Queue+0xd8>)
 80008f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008fa:	60bb      	str	r3, [r7, #8]
		 * |    0     |    0     |
		 * |----------|----------|
		 */

		//we are care now with tasks that are in waiting state not suspend state
		if(P_Curr_Task->Task_State != Suspend_State)
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000902:	2b00      	cmp	r3, #0
 8000904:	d033      	beq.n	800096e <MyRTOS_Update_Ready_Queue+0xb6>
		{
			//This if we reach to the end of the scheduler table
			if(P_Next_Task->Task_State == Suspend_State)
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800090c:	2b00      	cmp	r3, #0
 800090e:	d108      	bne.n	8000922 <MyRTOS_Update_Ready_Queue+0x6a>
			{
				FIFO_Enqueue_Item(&Ready_Queue, P_Curr_Task);
 8000910:	68f9      	ldr	r1, [r7, #12]
 8000912:	481e      	ldr	r0, [pc, #120]	; (800098c <MyRTOS_Update_Ready_Queue+0xd4>)
 8000914:	f7ff fd38 	bl	8000388 <FIFO_Enqueue_Item>
				P_Curr_Task->Task_State = Ready_State;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	2202      	movs	r2, #2
 800091c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 8000920:	e02e      	b.n	8000980 <MyRTOS_Update_Ready_Queue+0xc8>
			}

			if(P_Curr_Task->Task_Priority < P_Next_Task->Task_Priority)
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	791a      	ldrb	r2, [r3, #4]
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	791b      	ldrb	r3, [r3, #4]
 800092a:	429a      	cmp	r2, r3
 800092c:	d208      	bcs.n	8000940 <MyRTOS_Update_Ready_Queue+0x88>
			{
				//This if the next task is low priority from the current then we push current to ready queue
				FIFO_Enqueue_Item(&Ready_Queue, P_Curr_Task);
 800092e:	68f9      	ldr	r1, [r7, #12]
 8000930:	4816      	ldr	r0, [pc, #88]	; (800098c <MyRTOS_Update_Ready_Queue+0xd4>)
 8000932:	f7ff fd29 	bl	8000388 <FIFO_Enqueue_Item>
				P_Curr_Task->Task_State = Ready_State;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	2202      	movs	r2, #2
 800093a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 800093e:	e01f      	b.n	8000980 <MyRTOS_Update_Ready_Queue+0xc8>
			}
			else if(P_Curr_Task->Task_Priority == P_Next_Task->Task_Priority)
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	791a      	ldrb	r2, [r3, #4]
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	791b      	ldrb	r3, [r3, #4]
 8000948:	429a      	cmp	r2, r3
 800094a:	d108      	bne.n	800095e <MyRTOS_Update_Ready_Queue+0xa6>
			{
				//This if the next task is equal the current task in priority then we push current to ready queue
				//and we will continue to the relation of next task with its next
				FIFO_Enqueue_Item(&Ready_Queue, P_Curr_Task);
 800094c:	68f9      	ldr	r1, [r7, #12]
 800094e:	480f      	ldr	r0, [pc, #60]	; (800098c <MyRTOS_Update_Ready_Queue+0xd4>)
 8000950:	f7ff fd1a 	bl	8000388 <FIFO_Enqueue_Item>
				P_Curr_Task->Task_State = Ready_State;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	2202      	movs	r2, #2
 8000958:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800095c:	e007      	b.n	800096e <MyRTOS_Update_Ready_Queue+0xb6>
			}
			else if(P_Curr_Task->Task_Priority > P_Next_Task->Task_Priority)
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	791a      	ldrb	r2, [r3, #4]
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	791b      	ldrb	r3, [r3, #4]
 8000966:	429a      	cmp	r2, r3
 8000968:	d901      	bls.n	800096e <MyRTOS_Update_Ready_Queue+0xb6>
			{
				//This can't happen because we sort the scheduler table with bubble sort
				Local_enuErrorState = ES_Error_Bubble_Sort;
 800096a:	2303      	movs	r3, #3
 800096c:	75fb      	strb	r3, [r7, #23]
			}
		}

		i++;
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	3301      	adds	r3, #1
 8000972:	613b      	str	r3, [r7, #16]
	while(i < OS_Control_t.No_of_Active_Tasks)
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MyRTOS_Update_Ready_Queue+0xd8>)
 8000976:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	429a      	cmp	r2, r3
 800097e:	d3b2      	bcc.n	80008e6 <MyRTOS_Update_Ready_Queue+0x2e>
	}

	return Local_enuErrorState;
 8000980:	7dfb      	ldrb	r3, [r7, #23]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3718      	adds	r7, #24
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	2000003c 	.word	0x2000003c
 8000990:	20000050 	.word	0x20000050

08000994 <OS_Decide_What_Next>:
 * Function [IN] : none
 * Function [OUT]: none
 * Usage         : it's used to decide which task that should run next the current task
 */
void OS_Decide_What_Next(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	//This in case The Queue is empty and OS_Control_t.Current_Task->Task_State != Suspend_State
	//This happen when we have only one task and this task is interrupting by svc
	//we need to continue in running it
	if(Ready_Queue.count == 0 && OS_Control_t.Current_Task->Task_State != Suspend_State)
 8000998:	4b24      	ldr	r3, [pc, #144]	; (8000a2c <OS_Decide_What_Next+0x98>)
 800099a:	691b      	ldr	r3, [r3, #16]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d11a      	bne.n	80009d6 <OS_Decide_What_Next+0x42>
 80009a0:	4b23      	ldr	r3, [pc, #140]	; (8000a30 <OS_Decide_What_Next+0x9c>)
 80009a2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d013      	beq.n	80009d6 <OS_Decide_What_Next+0x42>
	{
		OS_Control_t.Current_Task->Task_State = Running_State;
 80009ae:	4b20      	ldr	r3, [pc, #128]	; (8000a30 <OS_Decide_What_Next+0x9c>)
 80009b0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009b4:	2203      	movs	r2, #3
 80009b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

		//add Task to Ready Queue to run it till the task is terminate
		FIFO_Enqueue_Item(&Ready_Queue, OS_Control_t.Current_Task);
 80009ba:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <OS_Decide_What_Next+0x9c>)
 80009bc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009c0:	4619      	mov	r1, r3
 80009c2:	481a      	ldr	r0, [pc, #104]	; (8000a2c <OS_Decide_What_Next+0x98>)
 80009c4:	f7ff fce0 	bl	8000388 <FIFO_Enqueue_Item>
		OS_Control_t.Next_Task = OS_Control_t.Current_Task;
 80009c8:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <OS_Decide_What_Next+0x9c>)
 80009ca:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009ce:	4a18      	ldr	r2, [pc, #96]	; (8000a30 <OS_Decide_What_Next+0x9c>)
 80009d0:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
			//we do this because we run with Round Robin Algorithm
			FIFO_Enqueue_Item(&Ready_Queue, OS_Control_t.Current_Task);
			OS_Control_t.Current_Task->Task_State = Ready_State;
		}
	}
}
 80009d4:	e027      	b.n	8000a26 <OS_Decide_What_Next+0x92>
		FIFO_Dequeue_Item(&Ready_Queue, &OS_Control_t.Next_Task);
 80009d6:	4917      	ldr	r1, [pc, #92]	; (8000a34 <OS_Decide_What_Next+0xa0>)
 80009d8:	4814      	ldr	r0, [pc, #80]	; (8000a2c <OS_Decide_What_Next+0x98>)
 80009da:	f7ff fd12 	bl	8000402 <FIFO_Dequeue_Item>
		OS_Control_t.Next_Task->Task_State = Running_State;
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <OS_Decide_What_Next+0x9c>)
 80009e0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80009e4:	2203      	movs	r2, #3
 80009e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		if((OS_Control_t.Current_Task->Task_Priority == OS_Control_t.Next_Task->Task_Priority) && (OS_Control_t.Current_Task->Task_State != Suspend_State))
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <OS_Decide_What_Next+0x9c>)
 80009ec:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009f0:	791a      	ldrb	r2, [r3, #4]
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <OS_Decide_What_Next+0x9c>)
 80009f4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80009f8:	791b      	ldrb	r3, [r3, #4]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d113      	bne.n	8000a26 <OS_Decide_What_Next+0x92>
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <OS_Decide_What_Next+0x9c>)
 8000a00:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a04:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d00c      	beq.n	8000a26 <OS_Decide_What_Next+0x92>
			FIFO_Enqueue_Item(&Ready_Queue, OS_Control_t.Current_Task);
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <OS_Decide_What_Next+0x9c>)
 8000a0e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <OS_Decide_What_Next+0x98>)
 8000a16:	f7ff fcb7 	bl	8000388 <FIFO_Enqueue_Item>
			OS_Control_t.Current_Task->Task_State = Ready_State;
 8000a1a:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <OS_Decide_What_Next+0x9c>)
 8000a1c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a20:	2202      	movs	r2, #2
 8000a22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	2000003c 	.word	0x2000003c
 8000a30:	20000050 	.word	0x20000050
 8000a34:	200001f4 	.word	0x200001f4

08000a38 <OS_SVC_Services>:
 *                 we will use it to get SVC ID and we take it from R0
 * Function [OUT]: it's return the error state of function to check with it if any error happens
 * Usage         : it's used to determine the SVC ID then call the SVC handler with correct id
 */
MYRTOS_ES_t OS_SVC_Services(unsigned int *Stack_Frame_Pointer)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	MYRTOS_ES_t Local_enuErrorState = ES_NoError;
 8000a40:	2300      	movs	r3, #0
 8000a42:	73fb      	strb	r3, [r7, #15]

	unsigned char SVC_ID;
	SVC_ID = *((unsigned char *)(((unsigned char *)Stack_Frame_Pointer[6])-2));
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3318      	adds	r3, #24
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	3b02      	subs	r3, #2
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	73bb      	strb	r3, [r7, #14]

	switch(SVC_ID)
 8000a50:	7bbb      	ldrb	r3, [r7, #14]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	2b04      	cmp	r3, #4
 8000a56:	d869      	bhi.n	8000b2c <OS_SVC_Services+0xf4>
 8000a58:	a201      	add	r2, pc, #4	; (adr r2, 8000a60 <OS_SVC_Services+0x28>)
 8000a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a5e:	bf00      	nop
 8000a60:	08000a75 	.word	0x08000a75
 8000a64:	08000a75 	.word	0x08000a75
 8000a68:	08000abf 	.word	0x08000abf
 8000a6c:	08000adf 	.word	0x08000adf
 8000a70:	08000aff 	.word	0x08000aff
	{
	case SVC_Activate_Task:
	case SVC_Terminate_Task:
		//Update Scheduler Table
		Local_enuErrorState = MyRTOS_Update_Scheduler_Tabel();
 8000a74:	f7ff ff14 	bl	80008a0 <MyRTOS_Update_Scheduler_Tabel>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	73fb      	strb	r3, [r7, #15]
		if(Local_enuErrorState != ES_NoError)
 8000a7c:	7bfb      	ldrb	r3, [r7, #15]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d000      	beq.n	8000a84 <OS_SVC_Services+0x4c>
			while(1);
 8000a82:	e7fe      	b.n	8000a82 <OS_SVC_Services+0x4a>

		//Update Ready Queue
		Local_enuErrorState = MyRTOS_Update_Ready_Queue();
 8000a84:	f7ff ff18 	bl	80008b8 <MyRTOS_Update_Ready_Queue>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	73fb      	strb	r3, [r7, #15]
		if(Local_enuErrorState != ES_NoError)
 8000a8c:	7bfb      	ldrb	r3, [r7, #15]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d000      	beq.n	8000a94 <OS_SVC_Services+0x5c>
			while(1);
 8000a92:	e7fe      	b.n	8000a92 <OS_SVC_Services+0x5a>

		//OS is in Running State or not
		if(OS_Control_t.OS_State == OS_Running)
 8000a94:	4b28      	ldr	r3, [pc, #160]	; (8000b38 <OS_SVC_Services+0x100>)
 8000a96:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d13f      	bne.n	8000b1e <OS_SVC_Services+0xe6>
		{
			if(strcmp(OS_Control_t.Current_Task->Task_Name, "Idle_Task") != 0)
 8000a9e:	4b26      	ldr	r3, [pc, #152]	; (8000b38 <OS_SVC_Services+0x100>)
 8000aa0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000aa4:	331c      	adds	r3, #28
 8000aa6:	4925      	ldr	r1, [pc, #148]	; (8000b3c <OS_SVC_Services+0x104>)
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fb61 	bl	8000170 <strcmp>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d034      	beq.n	8000b1e <OS_SVC_Services+0xe6>
			{
				//Decide What task should run Next
				OS_Decide_What_Next();
 8000ab4:	f7ff ff6e 	bl	8000994 <OS_Decide_What_Next>

				//Trigger OS_PendSV (Switch Context/Restore for our Tasks)
				Trigger_OS_PendSV();
 8000ab8:	f7ff fbda 	bl	8000270 <Trigger_OS_PendSV>
			}
		}
		break;
 8000abc:	e02f      	b.n	8000b1e <OS_SVC_Services+0xe6>

	case SVC_Task_Waiting_Time:
		//Update Scheduler Table
		Local_enuErrorState = MyRTOS_Update_Scheduler_Tabel();
 8000abe:	f7ff feef 	bl	80008a0 <MyRTOS_Update_Scheduler_Tabel>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	73fb      	strb	r3, [r7, #15]
		if(Local_enuErrorState != ES_NoError)
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d000      	beq.n	8000ace <OS_SVC_Services+0x96>
			while(1);
 8000acc:	e7fe      	b.n	8000acc <OS_SVC_Services+0x94>

		//Update Ready Queue
		Local_enuErrorState = MyRTOS_Update_Ready_Queue();
 8000ace:	f7ff fef3 	bl	80008b8 <MyRTOS_Update_Ready_Queue>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	73fb      	strb	r3, [r7, #15]
		if(Local_enuErrorState != ES_NoError)
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d022      	beq.n	8000b22 <OS_SVC_Services+0xea>
			while(1);
 8000adc:	e7fe      	b.n	8000adc <OS_SVC_Services+0xa4>
		break;

	case SVC_Acquire_Mutex:
		//Update Scheduler Table
		Local_enuErrorState = MyRTOS_Update_Scheduler_Tabel();
 8000ade:	f7ff fedf 	bl	80008a0 <MyRTOS_Update_Scheduler_Tabel>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	73fb      	strb	r3, [r7, #15]
		if(Local_enuErrorState != ES_NoError)
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d000      	beq.n	8000aee <OS_SVC_Services+0xb6>
			while(1);
 8000aec:	e7fe      	b.n	8000aec <OS_SVC_Services+0xb4>

		//Update Ready Queue
		Local_enuErrorState = MyRTOS_Update_Ready_Queue();
 8000aee:	f7ff fee3 	bl	80008b8 <MyRTOS_Update_Ready_Queue>
 8000af2:	4603      	mov	r3, r0
 8000af4:	73fb      	strb	r3, [r7, #15]
		if(Local_enuErrorState != ES_NoError)
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d014      	beq.n	8000b26 <OS_SVC_Services+0xee>
			while(1);
 8000afc:	e7fe      	b.n	8000afc <OS_SVC_Services+0xc4>
		break;

	case SVC_Release_Mutex:
		//Update Scheduler Table
		Local_enuErrorState = MyRTOS_Update_Scheduler_Tabel();
 8000afe:	f7ff fecf 	bl	80008a0 <MyRTOS_Update_Scheduler_Tabel>
 8000b02:	4603      	mov	r3, r0
 8000b04:	73fb      	strb	r3, [r7, #15]
		if(Local_enuErrorState != ES_NoError)
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d000      	beq.n	8000b0e <OS_SVC_Services+0xd6>
			while(1);
 8000b0c:	e7fe      	b.n	8000b0c <OS_SVC_Services+0xd4>

		//Update Ready Queue
		Local_enuErrorState = MyRTOS_Update_Ready_Queue();
 8000b0e:	f7ff fed3 	bl	80008b8 <MyRTOS_Update_Ready_Queue>
 8000b12:	4603      	mov	r3, r0
 8000b14:	73fb      	strb	r3, [r7, #15]
		if(Local_enuErrorState != ES_NoError)
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d006      	beq.n	8000b2a <OS_SVC_Services+0xf2>
			while(1);
 8000b1c:	e7fe      	b.n	8000b1c <OS_SVC_Services+0xe4>
		break;
 8000b1e:	bf00      	nop
 8000b20:	e004      	b.n	8000b2c <OS_SVC_Services+0xf4>
		break;
 8000b22:	bf00      	nop
 8000b24:	e002      	b.n	8000b2c <OS_SVC_Services+0xf4>
		break;
 8000b26:	bf00      	nop
 8000b28:	e000      	b.n	8000b2c <OS_SVC_Services+0xf4>
		break;
 8000b2a:	bf00      	nop
	}

	return Local_enuErrorState;
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000050 	.word	0x20000050
 8000b3c:	080013bc 	.word	0x080013bc

08000b40 <MyRTOS_OS_SVC_Set>:
 * Function [IN] : it takes the ID of service that we need the OS do it
 * Function [OUT]: it's return the error state of function to check with it if any error happens
 * Usage         : it's used to call SVC with specific to execute specific function
 */
MYRTOS_ES_t MyRTOS_OS_SVC_Set(SVC_ID_t svc_id)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
	MYRTOS_ES_t Local_enuErrorState = ES_NoError;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	73fb      	strb	r3, [r7, #15]

	//we will use svc to reorder Task_Scheduler and update Ready_Queue
	switch(svc_id)
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	3b01      	subs	r3, #1
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	d816      	bhi.n	8000b84 <MyRTOS_OS_SVC_Set+0x44>
 8000b56:	a201      	add	r2, pc, #4	; (adr r2, 8000b5c <MyRTOS_OS_SVC_Set+0x1c>)
 8000b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5c:	08000b71 	.word	0x08000b71
 8000b60:	08000b75 	.word	0x08000b75
 8000b64:	08000b79 	.word	0x08000b79
 8000b68:	08000b7d 	.word	0x08000b7d
 8000b6c:	08000b81 	.word	0x08000b81
	{
	case SVC_Activate_Task:
		__asm("SVC #0x01");
 8000b70:	df01      	svc	1
		break;
 8000b72:	e007      	b.n	8000b84 <MyRTOS_OS_SVC_Set+0x44>

	case SVC_Terminate_Task:
		__asm("SVC #0x02");
 8000b74:	df02      	svc	2
		break;
 8000b76:	e005      	b.n	8000b84 <MyRTOS_OS_SVC_Set+0x44>

	case SVC_Task_Waiting_Time:
		__asm("SVC #0x03");
 8000b78:	df03      	svc	3
		break;
 8000b7a:	e003      	b.n	8000b84 <MyRTOS_OS_SVC_Set+0x44>

	case SVC_Acquire_Mutex:
		__asm("SVC #0x04");
 8000b7c:	df04      	svc	4
		break;
 8000b7e:	e001      	b.n	8000b84 <MyRTOS_OS_SVC_Set+0x44>

	case SVC_Release_Mutex:
		__asm("SVC #0x05");
 8000b80:	df05      	svc	5
		break;
 8000b82:	bf00      	nop
	}

	return Local_enuErrorState;
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <MyRTOS_Activate_Task>:
 * Function [IN] : it takes a pointer to task configuration that we need to Activate it
 * Function [OUT]: it's return the error state of function to check with it if any error happens
 * Usage         : it's used to activate task by adding it in waiting state then call SVC
 */
MYRTOS_ES_t MyRTOS_Activate_Task(Task_Ref_t *Task_Ref_Config)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	MYRTOS_ES_t Local_enuErrorState = ES_NoError;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	73fb      	strb	r3, [r7, #15]

	//Task enter waiting state when we activate it
	Task_Ref_Config->Task_State = Waiting_State;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	//set svc interrupt to activate the task
	MyRTOS_OS_SVC_Set(SVC_Activate_Task);
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f7ff ffcb 	bl	8000b40 <MyRTOS_OS_SVC_Set>


	return Local_enuErrorState;
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <MyRTOS_Terminate_Task>:
 * Function [IN] : it takes a pointer to task configuration that we need to Activate it
 * Function [OUT]: it's return the error state of function to check with it if any error happens
 * Usage         : it's used to terminate task by adding it in suspend state then call SVC
 */
MYRTOS_ES_t MyRTOS_Terminate_Task(Task_Ref_t *Task_Ref_Config)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	MYRTOS_ES_t Local_enuErrorState = ES_NoError;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	73fb      	strb	r3, [r7, #15]

	//Task enter suspend state when we terminate it
	Task_Ref_Config->Task_State = Suspend_State;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	//set svc interrupt to terminate the task
	MyRTOS_OS_SVC_Set(SVC_Terminate_Task);
 8000bc8:	2002      	movs	r0, #2
 8000bca:	f7ff ffb9 	bl	8000b40 <MyRTOS_OS_SVC_Set>

	return Local_enuErrorState;
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <MyRTOS_Start_OS>:
 * Function [IN] : none
 * Function [OUT]: it's return the error state of function to check with it if any error happens
 * Usage         : it's used to start os by set it in running state and ....
 */
MYRTOS_ES_t MyRTOS_Start_OS(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
	MYRTOS_ES_t Local_enuErrorState = ES_NoError;
 8000bde:	2300      	movs	r3, #0
 8000be0:	71fb      	strb	r3, [r7, #7]
	unsigned int Function_State = 1;
 8000be2:	2301      	movs	r3, #1
 8000be4:	603b      	str	r3, [r7, #0]

	//Enter the OS in Running Mode instead of Suspend Mode
	OS_Control_t.OS_State = OS_Running;
 8000be6:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <MyRTOS_Start_OS+0x7c>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//Set Default Task --> IDLE Task
	OS_Control_t.Current_Task = &MyRTOS_IDLE_TASK;
 8000bee:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <MyRTOS_Start_OS+0x7c>)
 8000bf0:	4a19      	ldr	r2, [pc, #100]	; (8000c58 <MyRTOS_Start_OS+0x80>)
 8000bf2:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0

	//Activate IDLE Task --> Run IDLE Task
	Local_enuErrorState = MyRTOS_Activate_Task(&MyRTOS_IDLE_TASK);
 8000bf6:	4818      	ldr	r0, [pc, #96]	; (8000c58 <MyRTOS_Start_OS+0x80>)
 8000bf8:	f7ff ffca 	bl	8000b90 <MyRTOS_Activate_Task>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	71fb      	strb	r3, [r7, #7]

	//Start Ticker --> 1ms
	Function_State = OS_Start_Ticker();
 8000c00:	f7ff fb44 	bl	800028c <OS_Start_Ticker>
 8000c04:	6038      	str	r0, [r7, #0]
	if(Function_State)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MyRTOS_Start_OS+0x38>
		Local_enuErrorState = ES_Error_SysTick_counting;
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	71fb      	strb	r3, [r7, #7]

	//Set PSP with PSP of Current Task
	OS_Set_PSP_Val(OS_Control_t.Current_Task->Current_PSP_Task);
 8000c10:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <MyRTOS_Start_OS+0x7c>)
 8000c12:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f380 8809 	msr	PSP, r0

	//Set SP shadow to PSP instead of MSP
	OS_Set_SP_shadowto_PSP;
 8000c1e:	f3ef 8014 	mrs	r0, CONTROL
 8000c22:	f04f 0102 	mov.w	r1, #2
 8000c26:	ea40 0001 	orr.w	r0, r0, r1
 8000c2a:	f380 8814 	msr	CONTROL, r0

	//Switch from Privileged to Unprivileged
	OS_Switch_Privileged_to_Unprivileged;
 8000c2e:	f3ef 8014 	mrs	r0, CONTROL
 8000c32:	f04f 0101 	mov.w	r1, #1
 8000c36:	ea40 0001 	orr.w	r0, r0, r1
 8000c3a:	f380 8814 	msr	CONTROL, r0

	//Run Current Task
	OS_Control_t.Current_Task->PF_Task_Entry();
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <MyRTOS_Start_OS+0x7c>)
 8000c40:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	4798      	blx	r3

	return Local_enuErrorState;
 8000c48:	79fb      	ldrb	r3, [r7, #7]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000050 	.word	0x20000050
 8000c58:	200001fc 	.word	0x200001fc

08000c5c <MyRTOS_Update_Waiting_Time>:
 * Function [IN] : none
 * Function [OUT]: none
 * Usage         : it's used to see if the time of blocking task is terminated or not
 */
void MyRTOS_Update_Waiting_Time(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
	unsigned int i;

	//loop for task that in suspend state and it has its own waiting time
	for(i = 0; i < OS_Control_t.No_of_Active_Tasks; i++)
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	e031      	b.n	8000ccc <MyRTOS_Update_Waiting_Time+0x70>
	{
		if(OS_Control_t.OS_Tasks[i]->Task_State == Suspend_State)
 8000c68:	4a1d      	ldr	r2, [pc, #116]	; (8000ce0 <MyRTOS_Update_Waiting_Time+0x84>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c70:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d126      	bne.n	8000cc6 <MyRTOS_Update_Waiting_Time+0x6a>
		{
			if(OS_Control_t.OS_Tasks[i]->Task_Timing_Waiting.Task_Blocking == Blocking_Enable)
 8000c78:	4a19      	ldr	r2, [pc, #100]	; (8000ce0 <MyRTOS_Update_Waiting_Time+0x84>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d11e      	bne.n	8000cc6 <MyRTOS_Update_Waiting_Time+0x6a>
			{
				OS_Control_t.OS_Tasks[i]->Task_Timing_Waiting.Ticks_Count--;
 8000c88:	4a15      	ldr	r2, [pc, #84]	; (8000ce0 <MyRTOS_Update_Waiting_Time+0x84>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c92:	3a01      	subs	r2, #1
 8000c94:	641a      	str	r2, [r3, #64]	; 0x40

				//if the waiting time is finish we will disable blocking and enter the task in waiting state
				if(OS_Control_t.OS_Tasks[i]->Task_Timing_Waiting.Ticks_Count == 0)
 8000c96:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <MyRTOS_Update_Waiting_Time+0x84>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d110      	bne.n	8000cc6 <MyRTOS_Update_Waiting_Time+0x6a>
				{
					OS_Control_t.OS_Tasks[i]->Task_Timing_Waiting.Task_Blocking = Blocking_Disable;
 8000ca4:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <MyRTOS_Update_Waiting_Time+0x84>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cac:	2200      	movs	r2, #0
 8000cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					OS_Control_t.OS_Tasks[i]->Task_State = Waiting_State;
 8000cb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <MyRTOS_Update_Waiting_Time+0x84>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

					MyRTOS_OS_SVC_Set(SVC_Task_Waiting_Time);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f7ff ff3d 	bl	8000b40 <MyRTOS_OS_SVC_Set>
	for(i = 0; i < OS_Control_t.No_of_Active_Tasks; i++)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <MyRTOS_Update_Waiting_Time+0x84>)
 8000cce:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d3c7      	bcc.n	8000c68 <MyRTOS_Update_Waiting_Time+0xc>
				}
			}
		}
	}
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000050 	.word	0x20000050

08000ce4 <MyRTOS_Mutex_Init>:
 * Function [IN] : it takes pointer to Mutex and it's configuration
 * Function [OUT]: none
 * Usage         : it's used to initialize the mutex with the send configuration
 */
void MyRTOS_Mutex_Init(Mutex_Configuration_t *Mutex_Ref_Config, void *PayLoad, unsigned int PayLoad_Size, char *MUTEX_NAME)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
 8000cf0:	603b      	str	r3, [r7, #0]
	Mutex_Ref_Config->Current_Task_User = NULL;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
	Mutex_Ref_Config->Next_Task_User = NULL;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	60da      	str	r2, [r3, #12]

	Mutex_Ref_Config->Data = PayLoad;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	68ba      	ldr	r2, [r7, #8]
 8000d02:	601a      	str	r2, [r3, #0]
	Mutex_Ref_Config->Data_Size = PayLoad_Size;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	605a      	str	r2, [r3, #4]

	Mutex_Ref_Config->mutex_state = Mutex_Released;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	strcpy(Mutex_Ref_Config->Mutex_Name, MUTEX_NAME);
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	3310      	adds	r3, #16
 8000d16:	6839      	ldr	r1, [r7, #0]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 fb3b 	bl	8001394 <strcpy>
}
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <MyRTOS_Acquire_Mutex>:
 * Function [IN] : it takes a pointer to the task and pointer to the Mutex
 * Function [OUT]: it's return the error state of function to check with it if any error happens
 * Usage         : it's used to acquire the mutex by specific task
 */
MYRTOS_ES_t MyRTOS_Acquire_Mutex(Task_Ref_t *Task_Ref_Config, Mutex_Configuration_t *Mutex_Config)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b084      	sub	sp, #16
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
 8000d2e:	6039      	str	r1, [r7, #0]
	MYRTOS_ES_t Local_enuErrorState = ES_NoError;
 8000d30:	2300      	movs	r3, #0
 8000d32:	73fb      	strb	r3, [r7, #15]

	//if the mutex is released and is not taken by any task
	if(Mutex_Config->Current_Task_User == NULL || Mutex_Config->mutex_state == Mutex_Released)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d004      	beq.n	8000d46 <MyRTOS_Acquire_Mutex+0x20>
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d107      	bne.n	8000d56 <MyRTOS_Acquire_Mutex+0x30>
	{
		Mutex_Config->Current_Task_User = Task_Ref_Config;
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
		Mutex_Config->mutex_state = Mutex_Blocked;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8000d54:	e010      	b.n	8000d78 <MyRTOS_Acquire_Mutex+0x52>
	}
	else	//if the mutex taken and used by the current task
	{
		if(Mutex_Config->Next_Task_User == NULL) //There is no pending Task for this mutex
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d10a      	bne.n	8000d74 <MyRTOS_Acquire_Mutex+0x4e>
		{
			Mutex_Config->Next_Task_User = Task_Ref_Config;
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	60da      	str	r2, [r3, #12]

			//task will enter the suspend state till the mutex is released
			Task_Ref_Config->Task_State = Suspend_State;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

			//terminate the task
			MyRTOS_OS_SVC_Set(SVC_Terminate_Task);
 8000d6c:	2002      	movs	r0, #2
 8000d6e:	f7ff fee7 	bl	8000b40 <MyRTOS_OS_SVC_Set>
 8000d72:	e001      	b.n	8000d78 <MyRTOS_Acquire_Mutex+0x52>

		}
		else	//there is a pending task need this mutex
		{
			Local_enuErrorState = ES_Error_Many_User_Mutex;
 8000d74:	2305      	movs	r3, #5
 8000d76:	73fb      	strb	r3, [r7, #15]
		}
	}

	return Local_enuErrorState;
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <MyRTOS_Release_Mutex>:
 * Function [IN] : it takes a pointer to the mutex
 * Function [OUT]: none
 * Usage         : it's used to release a mutex
 */
void MyRTOS_Release_Mutex(Mutex_Configuration_t *Mutex_Config)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	if(Mutex_Config->Current_Task_User == NULL || Mutex_Config->mutex_state == Mutex_Blocked)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d004      	beq.n	8000d9c <MyRTOS_Release_Mutex+0x1a>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d114      	bne.n	8000dc6 <MyRTOS_Release_Mutex+0x44>
	{
		Mutex_Config->Current_Task_User = Mutex_Config->Next_Task_User;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	68da      	ldr	r2, [r3, #12]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	609a      	str	r2, [r3, #8]
		Mutex_Config->Next_Task_User = NULL;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]

		Mutex_Config->mutex_state = Mutex_Released;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2201      	movs	r2, #1
 8000dae:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

		Mutex_Config->Current_Task_User->Task_State = Waiting_State;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	2201      	movs	r2, #1
 8000db8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

		MyRTOS_Activate_Task(Mutex_Config->Current_Task_User);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fee5 	bl	8000b90 <MyRTOS_Activate_Task>
	}
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <EXTI0_IRQHandler>:
//ISR Functions:
//-*-*-*-*-*-*-*-*-*-*-*

/* EXTI0 */
void EXTI0_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	//clear the Pending Register by writing a ‘1’ into the bit.
	SET_BIT(EXTI->PR,EXTI0);
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <EXTI0_IRQHandler+0x1c>)
 8000dd6:	695b      	ldr	r3, [r3, #20]
 8000dd8:	4a04      	ldr	r2, [pc, #16]	; (8000dec <EXTI0_IRQHandler+0x1c>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[EXTI0]();
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <EXTI0_IRQHandler+0x20>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4798      	blx	r3

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40010400 	.word	0x40010400
 8000df0:	200003d0 	.word	0x200003d0

08000df4 <EXTI1_IRQHandler>:

/* EXTI1 */
void EXTI1_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	//clear the Pending Register by writing a ‘1’ into the bit.
	SET_BIT(EXTI->PR,EXTI1);
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <EXTI1_IRQHandler+0x1c>)
 8000dfa:	695b      	ldr	r3, [r3, #20]
 8000dfc:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <EXTI1_IRQHandler+0x1c>)
 8000dfe:	f043 0302 	orr.w	r3, r3, #2
 8000e02:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[EXTI1]();
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <EXTI1_IRQHandler+0x20>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	4798      	blx	r3
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40010400 	.word	0x40010400
 8000e14:	200003d0 	.word	0x200003d0

08000e18 <EXTI2_IRQHandler>:

/* EXTI2 */
void EXTI2_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
	//clear the Pending Register by writing a ‘1’ into the bit.
	SET_BIT(EXTI->PR,EXTI2);
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <EXTI2_IRQHandler+0x1c>)
 8000e1e:	695b      	ldr	r3, [r3, #20]
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <EXTI2_IRQHandler+0x1c>)
 8000e22:	f043 0304 	orr.w	r3, r3, #4
 8000e26:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[EXTI2]();
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <EXTI2_IRQHandler+0x20>)
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	4798      	blx	r3
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40010400 	.word	0x40010400
 8000e38:	200003d0 	.word	0x200003d0

08000e3c <EXTI3_IRQHandler>:

/* EXTI3 */
void EXTI3_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
	//clear the Pending Register by writing a ‘1’ into the bit.
	SET_BIT(EXTI->PR,EXTI3);
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <EXTI3_IRQHandler+0x1c>)
 8000e42:	695b      	ldr	r3, [r3, #20]
 8000e44:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <EXTI3_IRQHandler+0x1c>)
 8000e46:	f043 0308 	orr.w	r3, r3, #8
 8000e4a:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[EXTI3]();
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <EXTI3_IRQHandler+0x20>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	4798      	blx	r3
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40010400 	.word	0x40010400
 8000e5c:	200003d0 	.word	0x200003d0

08000e60 <EXTI4_IRQHandler>:

/* EXTI4 */
void EXTI4_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	//clear the Pending Register by writing a ‘1’ into the bit.
	SET_BIT(EXTI->PR,EXTI4);
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <EXTI4_IRQHandler+0x1c>)
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <EXTI4_IRQHandler+0x1c>)
 8000e6a:	f043 0310 	orr.w	r3, r3, #16
 8000e6e:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[EXTI4]();
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <EXTI4_IRQHandler+0x20>)
 8000e72:	691b      	ldr	r3, [r3, #16]
 8000e74:	4798      	blx	r3
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40010400 	.word	0x40010400
 8000e80:	200003d0 	.word	0x200003d0

08000e84 <EXTI9_5_IRQHandler>:

/* EXTI9_5 */
void EXTI9_5_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	//clear the Pending Register by writing a ‘1’ into the bit.
	if(EXTI->PR & GPIO_PIN_5)
 8000e88:	4b26      	ldr	r3, [pc, #152]	; (8000f24 <EXTI9_5_IRQHandler+0xa0>)
 8000e8a:	695b      	ldr	r3, [r3, #20]
 8000e8c:	f003 0320 	and.w	r3, r3, #32
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d008      	beq.n	8000ea6 <EXTI9_5_IRQHandler+0x22>
	{
		SET_BIT(EXTI->PR,EXTI5);
 8000e94:	4b23      	ldr	r3, [pc, #140]	; (8000f24 <EXTI9_5_IRQHandler+0xa0>)
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	4a22      	ldr	r2, [pc, #136]	; (8000f24 <EXTI9_5_IRQHandler+0xa0>)
 8000e9a:	f043 0320 	orr.w	r3, r3, #32
 8000e9e:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI5]();
 8000ea0:	4b21      	ldr	r3, [pc, #132]	; (8000f28 <EXTI9_5_IRQHandler+0xa4>)
 8000ea2:	695b      	ldr	r3, [r3, #20]
 8000ea4:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_6)
 8000ea6:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <EXTI9_5_IRQHandler+0xa0>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d008      	beq.n	8000ec4 <EXTI9_5_IRQHandler+0x40>
	{
		SET_BIT(EXTI->PR,EXTI6);
 8000eb2:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <EXTI9_5_IRQHandler+0xa0>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	4a1b      	ldr	r2, [pc, #108]	; (8000f24 <EXTI9_5_IRQHandler+0xa0>)
 8000eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ebc:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI6]();
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <EXTI9_5_IRQHandler+0xa4>)
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_7)
 8000ec4:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <EXTI9_5_IRQHandler+0xa0>)
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d008      	beq.n	8000ee2 <EXTI9_5_IRQHandler+0x5e>
	{
		SET_BIT(EXTI->PR,EXTI7);
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <EXTI9_5_IRQHandler+0xa0>)
 8000ed2:	695b      	ldr	r3, [r3, #20]
 8000ed4:	4a13      	ldr	r2, [pc, #76]	; (8000f24 <EXTI9_5_IRQHandler+0xa0>)
 8000ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eda:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI7]();
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <EXTI9_5_IRQHandler+0xa4>)
 8000ede:	69db      	ldr	r3, [r3, #28]
 8000ee0:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_8)
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <EXTI9_5_IRQHandler+0xa0>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d008      	beq.n	8000f00 <EXTI9_5_IRQHandler+0x7c>
	{
		SET_BIT(EXTI->PR,EXTI8);
 8000eee:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <EXTI9_5_IRQHandler+0xa0>)
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	4a0c      	ldr	r2, [pc, #48]	; (8000f24 <EXTI9_5_IRQHandler+0xa0>)
 8000ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef8:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI8]();
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <EXTI9_5_IRQHandler+0xa4>)
 8000efc:	6a1b      	ldr	r3, [r3, #32]
 8000efe:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_9)
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <EXTI9_5_IRQHandler+0xa0>)
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d008      	beq.n	8000f1e <EXTI9_5_IRQHandler+0x9a>
	{
		SET_BIT(EXTI->PR,EXTI9);
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <EXTI9_5_IRQHandler+0xa0>)
 8000f0e:	695b      	ldr	r3, [r3, #20]
 8000f10:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <EXTI9_5_IRQHandler+0xa0>)
 8000f12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f16:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI9]();
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <EXTI9_5_IRQHandler+0xa4>)
 8000f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1c:	4798      	blx	r3
	}
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40010400 	.word	0x40010400
 8000f28:	200003d0 	.word	0x200003d0

08000f2c <EXTI15_10_IRQHandler>:

/* EXTI15_10 */
void EXTI15_10_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	//clear the Pending Register by writing a ‘1’ into the bit.
	if(EXTI->PR & GPIO_PIN_10)
 8000f30:	4b2d      	ldr	r3, [pc, #180]	; (8000fe8 <EXTI15_10_IRQHandler+0xbc>)
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d008      	beq.n	8000f4e <EXTI15_10_IRQHandler+0x22>
	{
		SET_BIT(EXTI->PR,EXTI10);
 8000f3c:	4b2a      	ldr	r3, [pc, #168]	; (8000fe8 <EXTI15_10_IRQHandler+0xbc>)
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	4a29      	ldr	r2, [pc, #164]	; (8000fe8 <EXTI15_10_IRQHandler+0xbc>)
 8000f42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f46:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI10]();
 8000f48:	4b28      	ldr	r3, [pc, #160]	; (8000fec <EXTI15_10_IRQHandler+0xc0>)
 8000f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f4c:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_11)
 8000f4e:	4b26      	ldr	r3, [pc, #152]	; (8000fe8 <EXTI15_10_IRQHandler+0xbc>)
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d008      	beq.n	8000f6c <EXTI15_10_IRQHandler+0x40>
	{
		SET_BIT(EXTI->PR,EXTI11);
 8000f5a:	4b23      	ldr	r3, [pc, #140]	; (8000fe8 <EXTI15_10_IRQHandler+0xbc>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	4a22      	ldr	r2, [pc, #136]	; (8000fe8 <EXTI15_10_IRQHandler+0xbc>)
 8000f60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f64:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI11]();
 8000f66:	4b21      	ldr	r3, [pc, #132]	; (8000fec <EXTI15_10_IRQHandler+0xc0>)
 8000f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f6a:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_12)
 8000f6c:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <EXTI15_10_IRQHandler+0xbc>)
 8000f6e:	695b      	ldr	r3, [r3, #20]
 8000f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d008      	beq.n	8000f8a <EXTI15_10_IRQHandler+0x5e>
	{
		SET_BIT(EXTI->PR,EXTI12);
 8000f78:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <EXTI15_10_IRQHandler+0xbc>)
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	4a1a      	ldr	r2, [pc, #104]	; (8000fe8 <EXTI15_10_IRQHandler+0xbc>)
 8000f7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f82:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI12]();
 8000f84:	4b19      	ldr	r3, [pc, #100]	; (8000fec <EXTI15_10_IRQHandler+0xc0>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f88:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_13)
 8000f8a:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <EXTI15_10_IRQHandler+0xbc>)
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d008      	beq.n	8000fa8 <EXTI15_10_IRQHandler+0x7c>
	{
		SET_BIT(EXTI->PR,EXTI13);
 8000f96:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <EXTI15_10_IRQHandler+0xbc>)
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	4a13      	ldr	r2, [pc, #76]	; (8000fe8 <EXTI15_10_IRQHandler+0xbc>)
 8000f9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fa0:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI13]();
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <EXTI15_10_IRQHandler+0xc0>)
 8000fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa6:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_14)
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <EXTI15_10_IRQHandler+0xbc>)
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d008      	beq.n	8000fc6 <EXTI15_10_IRQHandler+0x9a>
	{
		SET_BIT(EXTI->PR,EXTI14);
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <EXTI15_10_IRQHandler+0xbc>)
 8000fb6:	695b      	ldr	r3, [r3, #20]
 8000fb8:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <EXTI15_10_IRQHandler+0xbc>)
 8000fba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fbe:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI14]();
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <EXTI15_10_IRQHandler+0xc0>)
 8000fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fc4:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_15)
 8000fc6:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <EXTI15_10_IRQHandler+0xbc>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d008      	beq.n	8000fe4 <EXTI15_10_IRQHandler+0xb8>
	{
		SET_BIT(EXTI->PR,EXTI15);
 8000fd2:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <EXTI15_10_IRQHandler+0xbc>)
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <EXTI15_10_IRQHandler+0xbc>)
 8000fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fdc:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI15]();
 8000fde:	4b03      	ldr	r3, [pc, #12]	; (8000fec <EXTI15_10_IRQHandler+0xc0>)
 8000fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fe2:	4798      	blx	r3
	}
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40010400 	.word	0x40010400
 8000fec:	200003d0 	.word	0x200003d0

08000ff0 <Task1_Func>:
char data1[3] = {1, 2, 3};
char data2[3] = {1, 2, 3};


void Task1_Func(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	static int count = 0;

	while(1)
	{
		Task1_Led ^= 1;
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <Task1_Func+0x50>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	f083 0301 	eor.w	r3, r3, #1
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <Task1_Func+0x50>)
 8001000:	701a      	strb	r2, [r3, #0]

		count++;
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <Task1_Func+0x54>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	3301      	adds	r3, #1
 8001008:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <Task1_Func+0x54>)
 800100a:	6013      	str	r3, [r2, #0]
		if(count == 100)
 800100c:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <Task1_Func+0x54>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b64      	cmp	r3, #100	; 0x64
 8001012:	d10a      	bne.n	800102a <Task1_Func+0x3a>
		{
			MyRTOS_Acquire_Mutex(&Task1, &MUTEX1);
 8001014:	490c      	ldr	r1, [pc, #48]	; (8001048 <Task1_Func+0x58>)
 8001016:	480d      	ldr	r0, [pc, #52]	; (800104c <Task1_Func+0x5c>)
 8001018:	f7ff fe85 	bl	8000d26 <MyRTOS_Acquire_Mutex>
			MyRTOS_Activate_Task(&Task4);
 800101c:	480c      	ldr	r0, [pc, #48]	; (8001050 <Task1_Func+0x60>)
 800101e:	f7ff fdb7 	bl	8000b90 <MyRTOS_Activate_Task>
			MyRTOS_Acquire_Mutex(&Task1, &MUTEX2);
 8001022:	490c      	ldr	r1, [pc, #48]	; (8001054 <Task1_Func+0x64>)
 8001024:	4809      	ldr	r0, [pc, #36]	; (800104c <Task1_Func+0x5c>)
 8001026:	f7ff fe7e 	bl	8000d26 <MyRTOS_Acquire_Mutex>
		}

		if(count == 200)
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <Task1_Func+0x54>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2bc8      	cmp	r3, #200	; 0xc8
 8001030:	d1e0      	bne.n	8000ff4 <Task1_Func+0x4>
		{
			MyRTOS_Release_Mutex(&MUTEX1);
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <Task1_Func+0x58>)
 8001034:	f7ff fea5 	bl	8000d82 <MyRTOS_Release_Mutex>
			count = 0;
 8001038:	4b02      	ldr	r3, [pc, #8]	; (8001044 <Task1_Func+0x54>)
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
		Task1_Led ^= 1;
 800103e:	e7d9      	b.n	8000ff4 <Task1_Func+0x4>
 8001040:	200004c4 	.word	0x200004c4
 8001044:	20000024 	.word	0x20000024
 8001048:	20000450 	.word	0x20000450
 800104c:	20000480 	.word	0x20000480
 8001050:	2000040c 	.word	0x2000040c
 8001054:	200004c8 	.word	0x200004c8

08001058 <Task2_Func>:
		}
	}
}

void Task2_Func(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	static int count = 0;

	while(1)
	{
		Task2_Led ^= 1;
 800105c:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <Task2_Func+0x40>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	f083 0301 	eor.w	r3, r3, #1
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <Task2_Func+0x40>)
 8001068:	701a      	strb	r2, [r3, #0]

		count++;
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <Task2_Func+0x44>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	3301      	adds	r3, #1
 8001070:	4a0a      	ldr	r2, [pc, #40]	; (800109c <Task2_Func+0x44>)
 8001072:	6013      	str	r3, [r2, #0]
		if(count == 100)
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <Task2_Func+0x44>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b64      	cmp	r3, #100	; 0x64
 800107a:	d102      	bne.n	8001082 <Task2_Func+0x2a>
		{
			MyRTOS_Activate_Task(&Task3);
 800107c:	4808      	ldr	r0, [pc, #32]	; (80010a0 <Task2_Func+0x48>)
 800107e:	f7ff fd87 	bl	8000b90 <MyRTOS_Activate_Task>
		}

		if(count == 200)
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <Task2_Func+0x44>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2bc8      	cmp	r3, #200	; 0xc8
 8001088:	d1e8      	bne.n	800105c <Task2_Func+0x4>
		{
			count = 0;
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <Task2_Func+0x44>)
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
			MyRTOS_Terminate_Task(&Task2);
 8001090:	4804      	ldr	r0, [pc, #16]	; (80010a4 <Task2_Func+0x4c>)
 8001092:	f7ff fd8f 	bl	8000bb4 <MyRTOS_Terminate_Task>
		Task2_Led ^= 1;
 8001096:	e7e1      	b.n	800105c <Task2_Func+0x4>
 8001098:	20000584 	.word	0x20000584
 800109c:	20000028 	.word	0x20000028
 80010a0:	200004f8 	.word	0x200004f8
 80010a4:	20000540 	.word	0x20000540

080010a8 <Task3_Func>:
		}
	}
}

void Task3_Func(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	static int count = 0;

	while(1)
	{
		Task3_Led ^= 1;
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <Task3_Func+0x40>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	f083 0301 	eor.w	r3, r3, #1
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <Task3_Func+0x40>)
 80010b8:	701a      	strb	r2, [r3, #0]

		count++;
 80010ba:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <Task3_Func+0x44>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <Task3_Func+0x44>)
 80010c2:	6013      	str	r3, [r2, #0]
		if(count == 100)
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <Task3_Func+0x44>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b64      	cmp	r3, #100	; 0x64
 80010ca:	d102      	bne.n	80010d2 <Task3_Func+0x2a>
		{
			MyRTOS_Activate_Task(&Task4);
 80010cc:	4808      	ldr	r0, [pc, #32]	; (80010f0 <Task3_Func+0x48>)
 80010ce:	f7ff fd5f 	bl	8000b90 <MyRTOS_Activate_Task>
		}

		if(count == 200)
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <Task3_Func+0x44>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2bc8      	cmp	r3, #200	; 0xc8
 80010d8:	d1e8      	bne.n	80010ac <Task3_Func+0x4>
		{
			count = 0;
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <Task3_Func+0x44>)
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
			MyRTOS_Terminate_Task(&Task3);
 80010e0:	4804      	ldr	r0, [pc, #16]	; (80010f4 <Task3_Func+0x4c>)
 80010e2:	f7ff fd67 	bl	8000bb4 <MyRTOS_Terminate_Task>
		Task3_Led ^= 1;
 80010e6:	e7e1      	b.n	80010ac <Task3_Func+0x4>
 80010e8:	2000053c 	.word	0x2000053c
 80010ec:	2000002c 	.word	0x2000002c
 80010f0:	2000040c 	.word	0x2000040c
 80010f4:	200004f8 	.word	0x200004f8

080010f8 <Task4_Func>:
		}
	}
}

void Task4_Func(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	static int count = 0;

	while(1)
	{
		Task4_Led ^= 1;
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <Task4_Func+0x50>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	f083 0301 	eor.w	r3, r3, #1
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <Task4_Func+0x50>)
 8001108:	701a      	strb	r2, [r3, #0]

		count++;
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <Task4_Func+0x54>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	3301      	adds	r3, #1
 8001110:	4a0e      	ldr	r2, [pc, #56]	; (800114c <Task4_Func+0x54>)
 8001112:	6013      	str	r3, [r2, #0]

		if(count == 30)
 8001114:	4b0d      	ldr	r3, [pc, #52]	; (800114c <Task4_Func+0x54>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b1e      	cmp	r3, #30
 800111a:	d107      	bne.n	800112c <Task4_Func+0x34>
		{
			MyRTOS_Acquire_Mutex(&Task4, &MUTEX2);
 800111c:	490c      	ldr	r1, [pc, #48]	; (8001150 <Task4_Func+0x58>)
 800111e:	480d      	ldr	r0, [pc, #52]	; (8001154 <Task4_Func+0x5c>)
 8001120:	f7ff fe01 	bl	8000d26 <MyRTOS_Acquire_Mutex>
			MyRTOS_Acquire_Mutex(&Task4, &MUTEX1);
 8001124:	490c      	ldr	r1, [pc, #48]	; (8001158 <Task4_Func+0x60>)
 8001126:	480b      	ldr	r0, [pc, #44]	; (8001154 <Task4_Func+0x5c>)
 8001128:	f7ff fdfd 	bl	8000d26 <MyRTOS_Acquire_Mutex>
		}
		if(count == 200)
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <Task4_Func+0x54>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2bc8      	cmp	r3, #200	; 0xc8
 8001132:	d1e3      	bne.n	80010fc <Task4_Func+0x4>
		{
			count = 0;
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <Task4_Func+0x54>)
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
			MyRTOS_Release_Mutex(&MUTEX1);
 800113a:	4807      	ldr	r0, [pc, #28]	; (8001158 <Task4_Func+0x60>)
 800113c:	f7ff fe21 	bl	8000d82 <MyRTOS_Release_Mutex>
			MyRTOS_Terminate_Task(&Task4);
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <Task4_Func+0x5c>)
 8001142:	f7ff fd37 	bl	8000bb4 <MyRTOS_Terminate_Task>
		Task4_Led ^= 1;
 8001146:	e7d9      	b.n	80010fc <Task4_Func+0x4>
 8001148:	20000585 	.word	0x20000585
 800114c:	20000030 	.word	0x20000030
 8001150:	200004c8 	.word	0x200004c8
 8001154:	2000040c 	.word	0x2000040c
 8001158:	20000450 	.word	0x20000450

0800115c <main>:
		}
	}
}

int main(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
	MYRTOS_ES_t Local_enuErrorState = ES_NoError;
 8001162:	2300      	movs	r3, #0
 8001164:	71fb      	strb	r3, [r7, #7]

	//HW_init (Initialize Clock Tree, Rest Controller)
	HW_init();
 8001166:	f7ff f86f 	bl	8000248 <HW_init>

	MyRTOS_Mutex_Init(&MUTEX1, data1, 3, "mutex1");
 800116a:	4b4d      	ldr	r3, [pc, #308]	; (80012a0 <main+0x144>)
 800116c:	2203      	movs	r2, #3
 800116e:	494d      	ldr	r1, [pc, #308]	; (80012a4 <main+0x148>)
 8001170:	484d      	ldr	r0, [pc, #308]	; (80012a8 <main+0x14c>)
 8001172:	f7ff fdb7 	bl	8000ce4 <MyRTOS_Mutex_Init>
	MyRTOS_Mutex_Init(&MUTEX2, data2, 3, "mutex2");
 8001176:	4b4d      	ldr	r3, [pc, #308]	; (80012ac <main+0x150>)
 8001178:	2203      	movs	r2, #3
 800117a:	494d      	ldr	r1, [pc, #308]	; (80012b0 <main+0x154>)
 800117c:	484d      	ldr	r0, [pc, #308]	; (80012b4 <main+0x158>)
 800117e:	f7ff fdb1 	bl	8000ce4 <MyRTOS_Mutex_Init>

	Local_enuErrorState = MYRTOS_init();
 8001182:	f7ff fa8b 	bl	800069c <MYRTOS_init>
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
	if(Local_enuErrorState != ES_NoError)
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d000      	beq.n	8001192 <main+0x36>
		while(1);
 8001190:	e7fe      	b.n	8001190 <main+0x34>

	//Configuration of task1
	Task1.Task_Stack_Size = 1024;
 8001192:	4b49      	ldr	r3, [pc, #292]	; (80012b8 <main+0x15c>)
 8001194:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001198:	601a      	str	r2, [r3, #0]
	Task1.PF_Task_Entry = Task1_Func;
 800119a:	4b47      	ldr	r3, [pc, #284]	; (80012b8 <main+0x15c>)
 800119c:	4a47      	ldr	r2, [pc, #284]	; (80012bc <main+0x160>)
 800119e:	609a      	str	r2, [r3, #8]
	Task1.Task_Priority = 4;
 80011a0:	4b45      	ldr	r3, [pc, #276]	; (80012b8 <main+0x15c>)
 80011a2:	2204      	movs	r2, #4
 80011a4:	711a      	strb	r2, [r3, #4]
	strcpy(Task1.Task_Name, "Task_1");
 80011a6:	4b46      	ldr	r3, [pc, #280]	; (80012c0 <main+0x164>)
 80011a8:	4a46      	ldr	r2, [pc, #280]	; (80012c4 <main+0x168>)
 80011aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011ae:	6018      	str	r0, [r3, #0]
 80011b0:	3304      	adds	r3, #4
 80011b2:	8019      	strh	r1, [r3, #0]
 80011b4:	3302      	adds	r3, #2
 80011b6:	0c0a      	lsrs	r2, r1, #16
 80011b8:	701a      	strb	r2, [r3, #0]

	//Configuration of task2
	Task2.Task_Stack_Size = 1024;
 80011ba:	4b43      	ldr	r3, [pc, #268]	; (80012c8 <main+0x16c>)
 80011bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011c0:	601a      	str	r2, [r3, #0]
	Task2.PF_Task_Entry = Task2_Func;
 80011c2:	4b41      	ldr	r3, [pc, #260]	; (80012c8 <main+0x16c>)
 80011c4:	4a41      	ldr	r2, [pc, #260]	; (80012cc <main+0x170>)
 80011c6:	609a      	str	r2, [r3, #8]
	Task2.Task_Priority = 3;
 80011c8:	4b3f      	ldr	r3, [pc, #252]	; (80012c8 <main+0x16c>)
 80011ca:	2203      	movs	r2, #3
 80011cc:	711a      	strb	r2, [r3, #4]
	strcpy(Task2.Task_Name, "Task_2");
 80011ce:	4b40      	ldr	r3, [pc, #256]	; (80012d0 <main+0x174>)
 80011d0:	4a40      	ldr	r2, [pc, #256]	; (80012d4 <main+0x178>)
 80011d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011d6:	6018      	str	r0, [r3, #0]
 80011d8:	3304      	adds	r3, #4
 80011da:	8019      	strh	r1, [r3, #0]
 80011dc:	3302      	adds	r3, #2
 80011de:	0c0a      	lsrs	r2, r1, #16
 80011e0:	701a      	strb	r2, [r3, #0]

	//Configuration of task3
	Task3.Task_Stack_Size = 1024;
 80011e2:	4b3d      	ldr	r3, [pc, #244]	; (80012d8 <main+0x17c>)
 80011e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011e8:	601a      	str	r2, [r3, #0]
	Task3.PF_Task_Entry = Task3_Func;
 80011ea:	4b3b      	ldr	r3, [pc, #236]	; (80012d8 <main+0x17c>)
 80011ec:	4a3b      	ldr	r2, [pc, #236]	; (80012dc <main+0x180>)
 80011ee:	609a      	str	r2, [r3, #8]
	Task3.Task_Priority = 2;
 80011f0:	4b39      	ldr	r3, [pc, #228]	; (80012d8 <main+0x17c>)
 80011f2:	2202      	movs	r2, #2
 80011f4:	711a      	strb	r2, [r3, #4]
	strcpy(Task3.Task_Name, "Task_3");
 80011f6:	4b3a      	ldr	r3, [pc, #232]	; (80012e0 <main+0x184>)
 80011f8:	4a3a      	ldr	r2, [pc, #232]	; (80012e4 <main+0x188>)
 80011fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011fe:	6018      	str	r0, [r3, #0]
 8001200:	3304      	adds	r3, #4
 8001202:	8019      	strh	r1, [r3, #0]
 8001204:	3302      	adds	r3, #2
 8001206:	0c0a      	lsrs	r2, r1, #16
 8001208:	701a      	strb	r2, [r3, #0]

	//Configuration of task4
	Task4.Task_Stack_Size = 1024;
 800120a:	4b37      	ldr	r3, [pc, #220]	; (80012e8 <main+0x18c>)
 800120c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001210:	601a      	str	r2, [r3, #0]
	Task4.PF_Task_Entry = Task4_Func;
 8001212:	4b35      	ldr	r3, [pc, #212]	; (80012e8 <main+0x18c>)
 8001214:	4a35      	ldr	r2, [pc, #212]	; (80012ec <main+0x190>)
 8001216:	609a      	str	r2, [r3, #8]
	Task4.Task_Priority = 1;
 8001218:	4b33      	ldr	r3, [pc, #204]	; (80012e8 <main+0x18c>)
 800121a:	2201      	movs	r2, #1
 800121c:	711a      	strb	r2, [r3, #4]
	strcpy(Task4.Task_Name, "Task_4");
 800121e:	4b34      	ldr	r3, [pc, #208]	; (80012f0 <main+0x194>)
 8001220:	4a34      	ldr	r2, [pc, #208]	; (80012f4 <main+0x198>)
 8001222:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001226:	6018      	str	r0, [r3, #0]
 8001228:	3304      	adds	r3, #4
 800122a:	8019      	strh	r1, [r3, #0]
 800122c:	3302      	adds	r3, #2
 800122e:	0c0a      	lsrs	r2, r1, #16
 8001230:	701a      	strb	r2, [r3, #0]

	//Create the 1st Task
	Local_enuErrorState = MyRTOS_Create_Task(&Task1);
 8001232:	4821      	ldr	r0, [pc, #132]	; (80012b8 <main+0x15c>)
 8001234:	f7ff faac 	bl	8000790 <MyRTOS_Create_Task>
 8001238:	4603      	mov	r3, r0
 800123a:	71fb      	strb	r3, [r7, #7]
	if(Local_enuErrorState != ES_NoError)
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d000      	beq.n	8001244 <main+0xe8>
		while(1);
 8001242:	e7fe      	b.n	8001242 <main+0xe6>

	//Create the 2nd Task
	Local_enuErrorState = MyRTOS_Create_Task(&Task2);
 8001244:	4820      	ldr	r0, [pc, #128]	; (80012c8 <main+0x16c>)
 8001246:	f7ff faa3 	bl	8000790 <MyRTOS_Create_Task>
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
	if(Local_enuErrorState != ES_NoError)
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d000      	beq.n	8001256 <main+0xfa>
		while(1);
 8001254:	e7fe      	b.n	8001254 <main+0xf8>

	//Create the 3rd Task
	Local_enuErrorState = MyRTOS_Create_Task(&Task3);
 8001256:	4820      	ldr	r0, [pc, #128]	; (80012d8 <main+0x17c>)
 8001258:	f7ff fa9a 	bl	8000790 <MyRTOS_Create_Task>
 800125c:	4603      	mov	r3, r0
 800125e:	71fb      	strb	r3, [r7, #7]
	if(Local_enuErrorState != ES_NoError)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d000      	beq.n	8001268 <main+0x10c>
		while(1);
 8001266:	e7fe      	b.n	8001266 <main+0x10a>

	//Create the 4th Task
	Local_enuErrorState = MyRTOS_Create_Task(&Task4);
 8001268:	481f      	ldr	r0, [pc, #124]	; (80012e8 <main+0x18c>)
 800126a:	f7ff fa91 	bl	8000790 <MyRTOS_Create_Task>
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
	if(Local_enuErrorState != ES_NoError)
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d000      	beq.n	800127a <main+0x11e>
		while(1);
 8001278:	e7fe      	b.n	8001278 <main+0x11c>

	//Activate the 1st Task
	Local_enuErrorState = MyRTOS_Activate_Task(&Task1);
 800127a:	480f      	ldr	r0, [pc, #60]	; (80012b8 <main+0x15c>)
 800127c:	f7ff fc88 	bl	8000b90 <MyRTOS_Activate_Task>
 8001280:	4603      	mov	r3, r0
 8001282:	71fb      	strb	r3, [r7, #7]
	if(Local_enuErrorState != ES_NoError)
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d000      	beq.n	800128c <main+0x130>
		while(1);
 800128a:	e7fe      	b.n	800128a <main+0x12e>

	Local_enuErrorState = MyRTOS_Start_OS();
 800128c:	f7ff fca4 	bl	8000bd8 <MyRTOS_Start_OS>
 8001290:	4603      	mov	r3, r0
 8001292:	71fb      	strb	r3, [r7, #7]
	if(Local_enuErrorState != ES_NoError)
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d000      	beq.n	800129c <main+0x140>
		while(1);
 800129a:	e7fe      	b.n	800129a <main+0x13e>


	/* Loop forever */
	while(1)
 800129c:	e7fe      	b.n	800129c <main+0x140>
 800129e:	bf00      	nop
 80012a0:	080013c8 	.word	0x080013c8
 80012a4:	20000000 	.word	0x20000000
 80012a8:	20000450 	.word	0x20000450
 80012ac:	080013d0 	.word	0x080013d0
 80012b0:	20000004 	.word	0x20000004
 80012b4:	200004c8 	.word	0x200004c8
 80012b8:	20000480 	.word	0x20000480
 80012bc:	08000ff1 	.word	0x08000ff1
 80012c0:	2000049c 	.word	0x2000049c
 80012c4:	080013d8 	.word	0x080013d8
 80012c8:	20000540 	.word	0x20000540
 80012cc:	08001059 	.word	0x08001059
 80012d0:	2000055c 	.word	0x2000055c
 80012d4:	080013e0 	.word	0x080013e0
 80012d8:	200004f8 	.word	0x200004f8
 80012dc:	080010a9 	.word	0x080010a9
 80012e0:	20000514 	.word	0x20000514
 80012e4:	080013e8 	.word	0x080013e8
 80012e8:	2000040c 	.word	0x2000040c
 80012ec:	080010f9 	.word	0x080010f9
 80012f0:	20000428 	.word	0x20000428
 80012f4:	080013f0 	.word	0x080013f0

080012f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012f8:	480d      	ldr	r0, [pc, #52]	; (8001330 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012fa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80012fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001300:	480c      	ldr	r0, [pc, #48]	; (8001334 <LoopForever+0x6>)
  ldr r1, =_edata
 8001302:	490d      	ldr	r1, [pc, #52]	; (8001338 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001304:	4a0d      	ldr	r2, [pc, #52]	; (800133c <LoopForever+0xe>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001308:	e002      	b.n	8001310 <LoopCopyDataInit>

0800130a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800130c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130e:	3304      	adds	r3, #4

08001310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001314:	d3f9      	bcc.n	800130a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001318:	4c0a      	ldr	r4, [pc, #40]	; (8001344 <LoopForever+0x16>)
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800131c:	e001      	b.n	8001322 <LoopFillZerobss>

0800131e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001320:	3204      	adds	r2, #4

08001322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001324:	d3fb      	bcc.n	800131e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001326:	f000 f811 	bl	800134c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800132a:	f7ff ff17 	bl	800115c <main>

0800132e <LoopForever>:

LoopForever:
    b LoopForever
 800132e:	e7fe      	b.n	800132e <LoopForever>
  ldr   r0, =_estack
 8001330:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001338:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 800133c:	08001400 	.word	0x08001400
  ldr r2, =_sbss
 8001340:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8001344:	20000588 	.word	0x20000588

08001348 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001348:	e7fe      	b.n	8001348 <ADC1_2_IRQHandler>
	...

0800134c <__libc_init_array>:
 800134c:	b570      	push	{r4, r5, r6, lr}
 800134e:	2500      	movs	r5, #0
 8001350:	4e0c      	ldr	r6, [pc, #48]	; (8001384 <__libc_init_array+0x38>)
 8001352:	4c0d      	ldr	r4, [pc, #52]	; (8001388 <__libc_init_array+0x3c>)
 8001354:	1ba4      	subs	r4, r4, r6
 8001356:	10a4      	asrs	r4, r4, #2
 8001358:	42a5      	cmp	r5, r4
 800135a:	d109      	bne.n	8001370 <__libc_init_array+0x24>
 800135c:	f000 f822 	bl	80013a4 <_init>
 8001360:	2500      	movs	r5, #0
 8001362:	4e0a      	ldr	r6, [pc, #40]	; (800138c <__libc_init_array+0x40>)
 8001364:	4c0a      	ldr	r4, [pc, #40]	; (8001390 <__libc_init_array+0x44>)
 8001366:	1ba4      	subs	r4, r4, r6
 8001368:	10a4      	asrs	r4, r4, #2
 800136a:	42a5      	cmp	r5, r4
 800136c:	d105      	bne.n	800137a <__libc_init_array+0x2e>
 800136e:	bd70      	pop	{r4, r5, r6, pc}
 8001370:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001374:	4798      	blx	r3
 8001376:	3501      	adds	r5, #1
 8001378:	e7ee      	b.n	8001358 <__libc_init_array+0xc>
 800137a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800137e:	4798      	blx	r3
 8001380:	3501      	adds	r5, #1
 8001382:	e7f2      	b.n	800136a <__libc_init_array+0x1e>
 8001384:	080013f8 	.word	0x080013f8
 8001388:	080013f8 	.word	0x080013f8
 800138c:	080013f8 	.word	0x080013f8
 8001390:	080013fc 	.word	0x080013fc

08001394 <strcpy>:
 8001394:	4603      	mov	r3, r0
 8001396:	f811 2b01 	ldrb.w	r2, [r1], #1
 800139a:	f803 2b01 	strb.w	r2, [r3], #1
 800139e:	2a00      	cmp	r2, #0
 80013a0:	d1f9      	bne.n	8001396 <strcpy+0x2>
 80013a2:	4770      	bx	lr

080013a4 <_init>:
 80013a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013a6:	bf00      	nop
 80013a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013aa:	bc08      	pop	{r3}
 80013ac:	469e      	mov	lr, r3
 80013ae:	4770      	bx	lr

080013b0 <_fini>:
 80013b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013b2:	bf00      	nop
 80013b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013b6:	bc08      	pop	{r3}
 80013b8:	469e      	mov	lr, r3
 80013ba:	4770      	bx	lr
