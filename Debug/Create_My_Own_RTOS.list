
Create_My_Own_RTOS.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b74  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000ca4  08000ca4  00010ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000cb0  08000cb0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000cb0  08000cb0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cb0  08000cb0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cb0  08000cb0  00010cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cb4  08000cb4  00010cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000004  08000cbc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08000cbc  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002e9a  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007f2  00000000  00000000  00022ec7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000008e4  00000000  00000000  000236b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001b8  00000000  00000000  00023fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000160  00000000  00000000  00024158  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000039f9  00000000  00000000  000242b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001f0b  00000000  00000000  00027cb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000115f7  00000000  00000000  00029bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0003b1b3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004f4  00000000  00000000  0003b230  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c8c 	.word	0x08000c8c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000c8c 	.word	0x08000c8c

08000170 <HardFault_Handler>:

#include "CortexMx_OS_Porting.h"

/* we make infinite loop for faults to avoid unpredictable thing if a fault is happen */
void HardFault_Handler (void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	while(1)
 8000174:	e7fe      	b.n	8000174 <HardFault_Handler+0x4>

08000176 <MemManage_Handler>:
	{
	}
}

void MemManage_Handler (void)
{
 8000176:	b480      	push	{r7}
 8000178:	af00      	add	r7, sp, #0
	while(1)
 800017a:	e7fe      	b.n	800017a <MemManage_Handler+0x4>

0800017c <BusFault_Handler>:
	{
	}
}

void BusFault_Handler (void)
{
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0
	while(1)
 8000180:	e7fe      	b.n	8000180 <BusFault_Handler+0x4>

08000182 <UsageFault_Handler>:
	{
	}
}

void UsageFault_Handler (void)
{
 8000182:	b480      	push	{r7}
 8000184:	af00      	add	r7, sp, #0
	while(1)
 8000186:	e7fe      	b.n	8000186 <UsageFault_Handler+0x4>

08000188 <SVC_Handler>:
		 	 anything more in the stack to know to get SVC ID
 */
__attribute((naked)) void SVC_Handler(void)
{
	// Check which stack we use before stacking MSP or PSP
	__asm("TST LR, #0x4 \n\t"
 8000188:	f01e 0f04 	tst.w	lr, #4
 800018c:	bf0c      	ite	eq
 800018e:	f3ef 8008 	mrseq	r0, MSP
 8000192:	f3ef 8009 	mrsne	r0, PSP
 8000196:	f000 b801 	b.w	800019c <OS_SVC_Services>
			"ITE EQ \n\t"
			"MRSEQ R0, MSP \n\t"
			"MRSNE R0, PSP \n\t"
			"B OS_SVC_Services");
}
 800019a:	bf00      	nop

0800019c <OS_SVC_Services>:
#include "Scheduler.h"
#include "MYRTOS_FIFO.h"


void OS_SVC_Services(unsigned int *Stack_Pointer)
{
 800019c:	b480      	push	{r7}
 800019e:	b087      	sub	sp, #28
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
	unsigned char SVC_ID;
	unsigned int number1, number2;
	SVC_ID = *((unsigned char *)(((unsigned char *)Stack_Pointer[6])-2));
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	3318      	adds	r3, #24
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	3b02      	subs	r3, #2
 80001ac:	781b      	ldrb	r3, [r3, #0]
 80001ae:	75fb      	strb	r3, [r7, #23]

	number1 = Stack_Pointer[0];
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	613b      	str	r3, [r7, #16]
	number2 = Stack_Pointer[1];
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	685b      	ldr	r3, [r3, #4]
 80001ba:	60fb      	str	r3, [r7, #12]

	switch(SVC_ID)
 80001bc:	7dfb      	ldrb	r3, [r7, #23]
 80001be:	3b01      	subs	r3, #1
 80001c0:	2b03      	cmp	r3, #3
 80001c2:	d825      	bhi.n	8000210 <OS_SVC_Services+0x74>
 80001c4:	a201      	add	r2, pc, #4	; (adr r2, 80001cc <OS_SVC_Services+0x30>)
 80001c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ca:	bf00      	nop
 80001cc:	080001dd 	.word	0x080001dd
 80001d0:	080001e9 	.word	0x080001e9
 80001d4:	080001f5 	.word	0x080001f5
 80001d8:	08000203 	.word	0x08000203
	{
	case 1:	//Addition
		Stack_Pointer[0] = number1 + number2;
 80001dc:	693a      	ldr	r2, [r7, #16]
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	441a      	add	r2, r3
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	601a      	str	r2, [r3, #0]
		break;
 80001e6:	e013      	b.n	8000210 <OS_SVC_Services+0x74>

	case 2:	//Subtraction
		Stack_Pointer[0] = number1 - number2;
 80001e8:	693a      	ldr	r2, [r7, #16]
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	1ad2      	subs	r2, r2, r3
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	601a      	str	r2, [r3, #0]
		break;
 80001f2:	e00d      	b.n	8000210 <OS_SVC_Services+0x74>

	case 3:	//Multiplication
		Stack_Pointer[0] = number1 * number2;
 80001f4:	693b      	ldr	r3, [r7, #16]
 80001f6:	68fa      	ldr	r2, [r7, #12]
 80001f8:	fb02 f203 	mul.w	r2, r2, r3
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	601a      	str	r2, [r3, #0]
		break;
 8000200:	e006      	b.n	8000210 <OS_SVC_Services+0x74>

	case 4: //OS PendSV
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000202:	4b06      	ldr	r3, [pc, #24]	; (800021c <OS_SVC_Services+0x80>)
 8000204:	685b      	ldr	r3, [r3, #4]
 8000206:	4a05      	ldr	r2, [pc, #20]	; (800021c <OS_SVC_Services+0x80>)
 8000208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800020c:	6053      	str	r3, [r2, #4]
		break;
 800020e:	bf00      	nop
	}
}
 8000210:	bf00      	nop
 8000212:	371c      	adds	r7, #28
 8000214:	46bd      	mov	sp, r7
 8000216:	bc80      	pop	{r7}
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	e000ed00 	.word	0xe000ed00

08000220 <Updata_EXTI>:
 * 						-EXTI_PIN & EXTI_Trigger_Case & EXTI_IRQ_EN & PF_IRQ_CallBack
 * @retval 		-none
 * Note			-none
================================================================**/
void Updata_EXTI(EXTI_Configuration_t *EXTI_CONFIG)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	/* 1. Configure GPIO PIN as floating input (GPIO_MODE_INPUT_FLO) */
	GPIO_PIN_Configuration_t PIN_CFG;
	PIN_CFG.GPIO_PinNumber = EXTI_CONFIG->EXTI_PIN.EXTI_GPIO_PIN;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	891b      	ldrh	r3, [r3, #8]
 800022c:	813b      	strh	r3, [r7, #8]
	PIN_CFG.GPIO_PinMODE = GPIO_MODE_INPUT_FLO;
 800022e:	2301      	movs	r3, #1
 8000230:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_CONFIG->EXTI_PIN.EXTI_GPIO_PORT, &PIN_CFG);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	685b      	ldr	r3, [r3, #4]
 8000236:	f107 0208 	add.w	r2, r7, #8
 800023a:	4611      	mov	r1, r2
 800023c:	4618      	mov	r0, r3
 800023e:	f000 fb1a 	bl	8000876 <MCAL_GPIO_Init>

	//==========================================================================================

	/* 2. Choose the PORT that AFIO will connect with it --> PORT A or B or C or D */
	uint8_t AFIO_EXTICR_index = (EXTI_CONFIG->EXTI_PIN.EXTI_Input_Line_Number / 4); /* index 0 or 1 or 2 or 3 */
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	881b      	ldrh	r3, [r3, #0]
 8000246:	089b      	lsrs	r3, r3, #2
 8000248:	b29b      	uxth	r3, r3
 800024a:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_position = ((EXTI_CONFIG->EXTI_PIN.EXTI_Input_Line_Number % 4) * 4);	/* Position 0 or 4 or 8 or 12 */
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	881b      	ldrh	r3, [r3, #0]
 8000250:	b2db      	uxtb	r3, r3
 8000252:	f003 0303 	and.w	r3, r3, #3
 8000256:	b2db      	uxtb	r3, r3
 8000258:	009b      	lsls	r3, r3, #2
 800025a:	73bb      	strb	r3, [r7, #14]

	//clear the 4 bits first
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~(0xF << AFIO_EXTICR_position);
 800025c:	4a61      	ldr	r2, [pc, #388]	; (80003e4 <Updata_EXTI+0x1c4>)
 800025e:	7bfb      	ldrb	r3, [r7, #15]
 8000260:	3302      	adds	r3, #2
 8000262:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000266:	7bbb      	ldrb	r3, [r7, #14]
 8000268:	210f      	movs	r1, #15
 800026a:	fa01 f303 	lsl.w	r3, r1, r3
 800026e:	43db      	mvns	r3, r3
 8000270:	4618      	mov	r0, r3
 8000272:	495c      	ldr	r1, [pc, #368]	; (80003e4 <Updata_EXTI+0x1c4>)
 8000274:	7bfb      	ldrb	r3, [r7, #15]
 8000276:	4002      	ands	r2, r0
 8000278:	3302      	adds	r3, #2
 800027a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//write the values on the 4 bits according to @ref AFIO_GPIO_EXTI_Mapping
	AFIO->EXTICR[AFIO_EXTICR_index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_CONFIG->EXTI_PIN.EXTI_GPIO_PORT) & 0xF) << AFIO_EXTICR_position);
 800027e:	4a59      	ldr	r2, [pc, #356]	; (80003e4 <Updata_EXTI+0x1c4>)
 8000280:	7bfb      	ldrb	r3, [r7, #15]
 8000282:	3302      	adds	r3, #2
 8000284:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	4956      	ldr	r1, [pc, #344]	; (80003e8 <Updata_EXTI+0x1c8>)
 800028e:	428b      	cmp	r3, r1
 8000290:	d016      	beq.n	80002c0 <Updata_EXTI+0xa0>
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	4955      	ldr	r1, [pc, #340]	; (80003ec <Updata_EXTI+0x1cc>)
 8000298:	428b      	cmp	r3, r1
 800029a:	d00f      	beq.n	80002bc <Updata_EXTI+0x9c>
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	685b      	ldr	r3, [r3, #4]
 80002a0:	4953      	ldr	r1, [pc, #332]	; (80003f0 <Updata_EXTI+0x1d0>)
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d008      	beq.n	80002b8 <Updata_EXTI+0x98>
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	4952      	ldr	r1, [pc, #328]	; (80003f4 <Updata_EXTI+0x1d4>)
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d101      	bne.n	80002b4 <Updata_EXTI+0x94>
 80002b0:	2303      	movs	r3, #3
 80002b2:	e006      	b.n	80002c2 <Updata_EXTI+0xa2>
 80002b4:	2300      	movs	r3, #0
 80002b6:	e004      	b.n	80002c2 <Updata_EXTI+0xa2>
 80002b8:	2302      	movs	r3, #2
 80002ba:	e002      	b.n	80002c2 <Updata_EXTI+0xa2>
 80002bc:	2301      	movs	r3, #1
 80002be:	e000      	b.n	80002c2 <Updata_EXTI+0xa2>
 80002c0:	2300      	movs	r3, #0
 80002c2:	7bb9      	ldrb	r1, [r7, #14]
 80002c4:	408b      	lsls	r3, r1
 80002c6:	4618      	mov	r0, r3
 80002c8:	4946      	ldr	r1, [pc, #280]	; (80003e4 <Updata_EXTI+0x1c4>)
 80002ca:	7bfb      	ldrb	r3, [r7, #15]
 80002cc:	4302      	orrs	r2, r0
 80002ce:	3302      	adds	r3, #2
 80002d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//==========================================================================================

	/* 3. Choose the trigger case */
	CLEAR_BIT(EXTI->RTSR,EXTI_CONFIG->EXTI_PIN.EXTI_Input_Line_Number);
 80002d4:	4b48      	ldr	r3, [pc, #288]	; (80003f8 <Updata_EXTI+0x1d8>)
 80002d6:	689b      	ldr	r3, [r3, #8]
 80002d8:	687a      	ldr	r2, [r7, #4]
 80002da:	8812      	ldrh	r2, [r2, #0]
 80002dc:	4611      	mov	r1, r2
 80002de:	2201      	movs	r2, #1
 80002e0:	408a      	lsls	r2, r1
 80002e2:	43d2      	mvns	r2, r2
 80002e4:	4611      	mov	r1, r2
 80002e6:	4a44      	ldr	r2, [pc, #272]	; (80003f8 <Updata_EXTI+0x1d8>)
 80002e8:	400b      	ands	r3, r1
 80002ea:	6093      	str	r3, [r2, #8]
	CLEAR_BIT(EXTI->FTSR,EXTI_CONFIG->EXTI_PIN.EXTI_Input_Line_Number);
 80002ec:	4b42      	ldr	r3, [pc, #264]	; (80003f8 <Updata_EXTI+0x1d8>)
 80002ee:	68db      	ldr	r3, [r3, #12]
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	8812      	ldrh	r2, [r2, #0]
 80002f4:	4611      	mov	r1, r2
 80002f6:	2201      	movs	r2, #1
 80002f8:	408a      	lsls	r2, r1
 80002fa:	43d2      	mvns	r2, r2
 80002fc:	4611      	mov	r1, r2
 80002fe:	4a3e      	ldr	r2, [pc, #248]	; (80003f8 <Updata_EXTI+0x1d8>)
 8000300:	400b      	ands	r3, r1
 8000302:	60d3      	str	r3, [r2, #12]

	if(EXTI_CONFIG->EXTI_Trigger_Case == EXTI_Trigger_RISING)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	7b1b      	ldrb	r3, [r3, #12]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d10b      	bne.n	8000324 <Updata_EXTI+0x104>
	{
		SET_BIT(EXTI->RTSR,EXTI_CONFIG->EXTI_PIN.EXTI_Input_Line_Number);
 800030c:	4b3a      	ldr	r3, [pc, #232]	; (80003f8 <Updata_EXTI+0x1d8>)
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	8812      	ldrh	r2, [r2, #0]
 8000314:	4611      	mov	r1, r2
 8000316:	2201      	movs	r2, #1
 8000318:	408a      	lsls	r2, r1
 800031a:	4611      	mov	r1, r2
 800031c:	4a36      	ldr	r2, [pc, #216]	; (80003f8 <Updata_EXTI+0x1d8>)
 800031e:	430b      	orrs	r3, r1
 8000320:	6093      	str	r3, [r2, #8]
 8000322:	e029      	b.n	8000378 <Updata_EXTI+0x158>
	}
	else if(EXTI_CONFIG->EXTI_Trigger_Case == EXTI_Trigger_FALLING)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	7b1b      	ldrb	r3, [r3, #12]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d10b      	bne.n	8000344 <Updata_EXTI+0x124>
	{
		SET_BIT(EXTI->FTSR,EXTI_CONFIG->EXTI_PIN.EXTI_Input_Line_Number);
 800032c:	4b32      	ldr	r3, [pc, #200]	; (80003f8 <Updata_EXTI+0x1d8>)
 800032e:	68db      	ldr	r3, [r3, #12]
 8000330:	687a      	ldr	r2, [r7, #4]
 8000332:	8812      	ldrh	r2, [r2, #0]
 8000334:	4611      	mov	r1, r2
 8000336:	2201      	movs	r2, #1
 8000338:	408a      	lsls	r2, r1
 800033a:	4611      	mov	r1, r2
 800033c:	4a2e      	ldr	r2, [pc, #184]	; (80003f8 <Updata_EXTI+0x1d8>)
 800033e:	430b      	orrs	r3, r1
 8000340:	60d3      	str	r3, [r2, #12]
 8000342:	e019      	b.n	8000378 <Updata_EXTI+0x158>
	}
	else if(EXTI_CONFIG->EXTI_Trigger_Case == EXTI_Trigger_RISING_AND_FALLING)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	7b1b      	ldrb	r3, [r3, #12]
 8000348:	2b02      	cmp	r3, #2
 800034a:	d115      	bne.n	8000378 <Updata_EXTI+0x158>
	{
		SET_BIT(EXTI->RTSR,EXTI_CONFIG->EXTI_PIN.EXTI_Input_Line_Number);
 800034c:	4b2a      	ldr	r3, [pc, #168]	; (80003f8 <Updata_EXTI+0x1d8>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	687a      	ldr	r2, [r7, #4]
 8000352:	8812      	ldrh	r2, [r2, #0]
 8000354:	4611      	mov	r1, r2
 8000356:	2201      	movs	r2, #1
 8000358:	408a      	lsls	r2, r1
 800035a:	4611      	mov	r1, r2
 800035c:	4a26      	ldr	r2, [pc, #152]	; (80003f8 <Updata_EXTI+0x1d8>)
 800035e:	430b      	orrs	r3, r1
 8000360:	6093      	str	r3, [r2, #8]
		SET_BIT(EXTI->FTSR,EXTI_CONFIG->EXTI_PIN.EXTI_Input_Line_Number);
 8000362:	4b25      	ldr	r3, [pc, #148]	; (80003f8 <Updata_EXTI+0x1d8>)
 8000364:	68db      	ldr	r3, [r3, #12]
 8000366:	687a      	ldr	r2, [r7, #4]
 8000368:	8812      	ldrh	r2, [r2, #0]
 800036a:	4611      	mov	r1, r2
 800036c:	2201      	movs	r2, #1
 800036e:	408a      	lsls	r2, r1
 8000370:	4611      	mov	r1, r2
 8000372:	4a21      	ldr	r2, [pc, #132]	; (80003f8 <Updata_EXTI+0x1d8>)
 8000374:	430b      	orrs	r3, r1
 8000376:	60d3      	str	r3, [r2, #12]
	}

	//==========================================================================================

	/* 4. Update IRQ Handling CALLBACK */
	GP_IRQ_CallBack[EXTI_CONFIG->EXTI_PIN.EXTI_Input_Line_Number] = EXTI_CONFIG->PF_IRQ_CallBack;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	881b      	ldrh	r3, [r3, #0]
 800037c:	4619      	mov	r1, r3
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	691b      	ldr	r3, [r3, #16]
 8000382:	4a1e      	ldr	r2, [pc, #120]	; (80003fc <Updata_EXTI+0x1dc>)
 8000384:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	//==========================================================================================

	/* 5. Enable or Disable IRQ according to (EXTI_CONFIG->EXTI_IRQ_EN) */

	// enable interrupt mask register (IMR) at EXTI
	if(EXTI_CONFIG->EXTI_IRQ_EN == EXTI_IRQ_ENABLE)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	7b5b      	ldrb	r3, [r3, #13]
 800038c:	2b01      	cmp	r3, #1
 800038e:	d110      	bne.n	80003b2 <Updata_EXTI+0x192>
	{
		SET_BIT(EXTI->IMR,EXTI_CONFIG->EXTI_PIN.EXTI_Input_Line_Number);
 8000390:	4b19      	ldr	r3, [pc, #100]	; (80003f8 <Updata_EXTI+0x1d8>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	687a      	ldr	r2, [r7, #4]
 8000396:	8812      	ldrh	r2, [r2, #0]
 8000398:	4611      	mov	r1, r2
 800039a:	2201      	movs	r2, #1
 800039c:	408a      	lsls	r2, r1
 800039e:	4611      	mov	r1, r2
 80003a0:	4a15      	ldr	r2, [pc, #84]	; (80003f8 <Updata_EXTI+0x1d8>)
 80003a2:	430b      	orrs	r3, r1
 80003a4:	6013      	str	r3, [r2, #0]

		// interrupt set enable register (NVIC_ISER) at NVIC
		Enable_NVIC(EXTI_CONFIG->EXTI_PIN.EXTI_Input_Line_Number);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	881b      	ldrh	r3, [r3, #0]
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 f828 	bl	8000400 <Enable_NVIC>
		Disable_NVIC(EXTI_CONFIG->EXTI_PIN.EXTI_Input_Line_Number);
	}

	//==========================================================================================

}
 80003b0:	e013      	b.n	80003da <Updata_EXTI+0x1ba>
	else if(EXTI_CONFIG->EXTI_IRQ_EN == EXTI_IRQ_DISABLE)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	7b5b      	ldrb	r3, [r3, #13]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d10f      	bne.n	80003da <Updata_EXTI+0x1ba>
		SET_BIT(EXTI->IMR,EXTI_CONFIG->EXTI_PIN.EXTI_Input_Line_Number);
 80003ba:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <Updata_EXTI+0x1d8>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	687a      	ldr	r2, [r7, #4]
 80003c0:	8812      	ldrh	r2, [r2, #0]
 80003c2:	4611      	mov	r1, r2
 80003c4:	2201      	movs	r2, #1
 80003c6:	408a      	lsls	r2, r1
 80003c8:	4611      	mov	r1, r2
 80003ca:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <Updata_EXTI+0x1d8>)
 80003cc:	430b      	orrs	r3, r1
 80003ce:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_CONFIG->EXTI_PIN.EXTI_Input_Line_Number);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	881b      	ldrh	r3, [r3, #0]
 80003d4:	4618      	mov	r0, r3
 80003d6:	f000 f879 	bl	80004cc <Disable_NVIC>
}
 80003da:	bf00      	nop
 80003dc:	3710      	adds	r7, #16
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40010000 	.word	0x40010000
 80003e8:	40010800 	.word	0x40010800
 80003ec:	40010c00 	.word	0x40010c00
 80003f0:	40011000 	.word	0x40011000
 80003f4:	40011400 	.word	0x40011400
 80003f8:	40010400 	.word	0x40010400
 80003fc:	20000024 	.word	0x20000024

08000400 <Enable_NVIC>:
 * @param [in] 	-input_line_number: it's the input line number to enable the corresponding bit on NVIC
 * @retval 		-none
 * Note			-none
================================================================**/
void Enable_NVIC(uint16_t input_line_number)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	80fb      	strh	r3, [r7, #6]
	switch(input_line_number)
 800040a:	88fb      	ldrh	r3, [r7, #6]
 800040c:	2b0f      	cmp	r3, #15
 800040e:	d854      	bhi.n	80004ba <Enable_NVIC+0xba>
 8000410:	a201      	add	r2, pc, #4	; (adr r2, 8000418 <Enable_NVIC+0x18>)
 8000412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000416:	bf00      	nop
 8000418:	08000459 	.word	0x08000459
 800041c:	08000467 	.word	0x08000467
 8000420:	08000475 	.word	0x08000475
 8000424:	08000483 	.word	0x08000483
 8000428:	08000491 	.word	0x08000491
 800042c:	0800049f 	.word	0x0800049f
 8000430:	0800049f 	.word	0x0800049f
 8000434:	0800049f 	.word	0x0800049f
 8000438:	0800049f 	.word	0x0800049f
 800043c:	0800049f 	.word	0x0800049f
 8000440:	080004ad 	.word	0x080004ad
 8000444:	080004ad 	.word	0x080004ad
 8000448:	080004ad 	.word	0x080004ad
 800044c:	080004ad 	.word	0x080004ad
 8000450:	080004ad 	.word	0x080004ad
 8000454:	080004ad 	.word	0x080004ad
	{
	case 0:
		NVIC_EXTI0_IRQ_ENABLE;
 8000458:	4b1a      	ldr	r3, [pc, #104]	; (80004c4 <Enable_NVIC+0xc4>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a19      	ldr	r2, [pc, #100]	; (80004c4 <Enable_NVIC+0xc4>)
 800045e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000462:	6013      	str	r3, [r2, #0]
		break;
 8000464:	e029      	b.n	80004ba <Enable_NVIC+0xba>

	case 1:
		NVIC_EXTI1_IRQ_ENABLE;
 8000466:	4b17      	ldr	r3, [pc, #92]	; (80004c4 <Enable_NVIC+0xc4>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a16      	ldr	r2, [pc, #88]	; (80004c4 <Enable_NVIC+0xc4>)
 800046c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000470:	6013      	str	r3, [r2, #0]
		break;
 8000472:	e022      	b.n	80004ba <Enable_NVIC+0xba>

	case 2:
		NVIC_EXTI2_IRQ_ENABLE;
 8000474:	4b13      	ldr	r3, [pc, #76]	; (80004c4 <Enable_NVIC+0xc4>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a12      	ldr	r2, [pc, #72]	; (80004c4 <Enable_NVIC+0xc4>)
 800047a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800047e:	6013      	str	r3, [r2, #0]
		break;
 8000480:	e01b      	b.n	80004ba <Enable_NVIC+0xba>

	case 3:
		NVIC_EXTI3_IRQ_ENABLE;
 8000482:	4b10      	ldr	r3, [pc, #64]	; (80004c4 <Enable_NVIC+0xc4>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a0f      	ldr	r2, [pc, #60]	; (80004c4 <Enable_NVIC+0xc4>)
 8000488:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800048c:	6013      	str	r3, [r2, #0]
		break;
 800048e:	e014      	b.n	80004ba <Enable_NVIC+0xba>

	case 4:
		NVIC_EXTI4_IRQ_ENABLE;
 8000490:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <Enable_NVIC+0xc4>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a0b      	ldr	r2, [pc, #44]	; (80004c4 <Enable_NVIC+0xc4>)
 8000496:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800049a:	6013      	str	r3, [r2, #0]
		break;
 800049c:	e00d      	b.n	80004ba <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_EXTI9_5_IRQ_ENABLE;
 800049e:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <Enable_NVIC+0xc4>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a08      	ldr	r2, [pc, #32]	; (80004c4 <Enable_NVIC+0xc4>)
 80004a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80004a8:	6013      	str	r3, [r2, #0]
		break;
 80004aa:	e006      	b.n	80004ba <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_EXTI15_10_IRQ_ENABLE;
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <Enable_NVIC+0xc8>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a05      	ldr	r2, [pc, #20]	; (80004c8 <Enable_NVIC+0xc8>)
 80004b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004b6:	6013      	str	r3, [r2, #0]
		break;
 80004b8:	bf00      	nop
	}
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr
 80004c4:	e000e100 	.word	0xe000e100
 80004c8:	e000e104 	.word	0xe000e104

080004cc <Disable_NVIC>:
 * @param [in] 	-input_line_number: it's the input line number to disable the corresponding bit on NVIC
 * @retval 		-none
 * Note			-none
================================================================**/
void Disable_NVIC(uint16_t input_line_number)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	80fb      	strh	r3, [r7, #6]
	switch(input_line_number)
 80004d6:	88fb      	ldrh	r3, [r7, #6]
 80004d8:	2b0f      	cmp	r3, #15
 80004da:	d854      	bhi.n	8000586 <Disable_NVIC+0xba>
 80004dc:	a201      	add	r2, pc, #4	; (adr r2, 80004e4 <Disable_NVIC+0x18>)
 80004de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e2:	bf00      	nop
 80004e4:	08000525 	.word	0x08000525
 80004e8:	08000533 	.word	0x08000533
 80004ec:	08000541 	.word	0x08000541
 80004f0:	0800054f 	.word	0x0800054f
 80004f4:	0800055d 	.word	0x0800055d
 80004f8:	0800056b 	.word	0x0800056b
 80004fc:	0800056b 	.word	0x0800056b
 8000500:	0800056b 	.word	0x0800056b
 8000504:	0800056b 	.word	0x0800056b
 8000508:	0800056b 	.word	0x0800056b
 800050c:	08000579 	.word	0x08000579
 8000510:	08000579 	.word	0x08000579
 8000514:	08000579 	.word	0x08000579
 8000518:	08000579 	.word	0x08000579
 800051c:	08000579 	.word	0x08000579
 8000520:	08000579 	.word	0x08000579
	{
	case 0:
		NVIC_EXTI0_IRQ_DISABLE;
 8000524:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <Disable_NVIC+0xc4>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a19      	ldr	r2, [pc, #100]	; (8000590 <Disable_NVIC+0xc4>)
 800052a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800052e:	6013      	str	r3, [r2, #0]
		break;
 8000530:	e029      	b.n	8000586 <Disable_NVIC+0xba>

	case 1:
		NVIC_EXTI1_IRQ_DISABLE;
 8000532:	4b17      	ldr	r3, [pc, #92]	; (8000590 <Disable_NVIC+0xc4>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a16      	ldr	r2, [pc, #88]	; (8000590 <Disable_NVIC+0xc4>)
 8000538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800053c:	6013      	str	r3, [r2, #0]
		break;
 800053e:	e022      	b.n	8000586 <Disable_NVIC+0xba>

	case 2:
		NVIC_EXTI2_IRQ_DISABLE;
 8000540:	4b13      	ldr	r3, [pc, #76]	; (8000590 <Disable_NVIC+0xc4>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a12      	ldr	r2, [pc, #72]	; (8000590 <Disable_NVIC+0xc4>)
 8000546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800054a:	6013      	str	r3, [r2, #0]
		break;
 800054c:	e01b      	b.n	8000586 <Disable_NVIC+0xba>

	case 3:
		NVIC_EXTI3_IRQ_DISABLE;
 800054e:	4b10      	ldr	r3, [pc, #64]	; (8000590 <Disable_NVIC+0xc4>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a0f      	ldr	r2, [pc, #60]	; (8000590 <Disable_NVIC+0xc4>)
 8000554:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000558:	6013      	str	r3, [r2, #0]
		break;
 800055a:	e014      	b.n	8000586 <Disable_NVIC+0xba>

	case 4:
		NVIC_EXTI4_IRQ_DISABLE;
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <Disable_NVIC+0xc4>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a0b      	ldr	r2, [pc, #44]	; (8000590 <Disable_NVIC+0xc4>)
 8000562:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000566:	6013      	str	r3, [r2, #0]
		break;
 8000568:	e00d      	b.n	8000586 <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_EXTI9_5_IRQ_DISABLE;
 800056a:	4b09      	ldr	r3, [pc, #36]	; (8000590 <Disable_NVIC+0xc4>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a08      	ldr	r2, [pc, #32]	; (8000590 <Disable_NVIC+0xc4>)
 8000570:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000574:	6013      	str	r3, [r2, #0]
		break;
 8000576:	e006      	b.n	8000586 <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_EXTI15_10_IRQ_DISABLE;
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <Disable_NVIC+0xc8>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a05      	ldr	r2, [pc, #20]	; (8000594 <Disable_NVIC+0xc8>)
 800057e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000582:	6013      	str	r3, [r2, #0]
		break;
 8000584:	bf00      	nop
	}
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr
 8000590:	e000e180 	.word	0xe000e180
 8000594:	e000e184 	.word	0xe000e184

08000598 <MCAL_EXTI_GPIO_Init>:
 * Note			-STM32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 but LQFP48 Package has only GPIO A,B Part of C,D exported as external PINs from the MCU
 * 				 - you must enable RCC Clock for AFIO and & GPIOx
================================================================**/
void MCAL_EXTI_GPIO_Init(EXTI_Configuration_t *EXTI_CFG)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	Updata_EXTI(EXTI_CFG);
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f7ff fe3d 	bl	8000220 <Updata_EXTI>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <EXTI0_IRQHandler>:
//ISR Functions:
//-*-*-*-*-*-*-*-*-*-*-*

/* EXTI0 */
void EXTI0_IRQHandler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	//clear the Pending Register by writing a ‘1’ into the bit.
	SET_BIT(EXTI->PR,EXTI0);
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <EXTI0_IRQHandler+0x1c>)
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <EXTI0_IRQHandler+0x1c>)
 80005ba:	f043 0301 	orr.w	r3, r3, #1
 80005be:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[EXTI0]();
 80005c0:	4b03      	ldr	r3, [pc, #12]	; (80005d0 <EXTI0_IRQHandler+0x20>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4798      	blx	r3

}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40010400 	.word	0x40010400
 80005d0:	20000024 	.word	0x20000024

080005d4 <EXTI1_IRQHandler>:

/* EXTI1 */
void EXTI1_IRQHandler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	//clear the Pending Register by writing a ‘1’ into the bit.
	SET_BIT(EXTI->PR,EXTI1);
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <EXTI1_IRQHandler+0x1c>)
 80005da:	695b      	ldr	r3, [r3, #20]
 80005dc:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <EXTI1_IRQHandler+0x1c>)
 80005de:	f043 0302 	orr.w	r3, r3, #2
 80005e2:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[EXTI1]();
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <EXTI1_IRQHandler+0x20>)
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	4798      	blx	r3
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40010400 	.word	0x40010400
 80005f4:	20000024 	.word	0x20000024

080005f8 <EXTI2_IRQHandler>:

/* EXTI2 */
void EXTI2_IRQHandler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	//clear the Pending Register by writing a ‘1’ into the bit.
	SET_BIT(EXTI->PR,EXTI2);
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <EXTI2_IRQHandler+0x1c>)
 80005fe:	695b      	ldr	r3, [r3, #20]
 8000600:	4a04      	ldr	r2, [pc, #16]	; (8000614 <EXTI2_IRQHandler+0x1c>)
 8000602:	f043 0304 	orr.w	r3, r3, #4
 8000606:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[EXTI2]();
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <EXTI2_IRQHandler+0x20>)
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	4798      	blx	r3
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40010400 	.word	0x40010400
 8000618:	20000024 	.word	0x20000024

0800061c <EXTI3_IRQHandler>:

/* EXTI3 */
void EXTI3_IRQHandler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	//clear the Pending Register by writing a ‘1’ into the bit.
	SET_BIT(EXTI->PR,EXTI3);
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <EXTI3_IRQHandler+0x1c>)
 8000622:	695b      	ldr	r3, [r3, #20]
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <EXTI3_IRQHandler+0x1c>)
 8000626:	f043 0308 	orr.w	r3, r3, #8
 800062a:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[EXTI3]();
 800062c:	4b03      	ldr	r3, [pc, #12]	; (800063c <EXTI3_IRQHandler+0x20>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	4798      	blx	r3
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40010400 	.word	0x40010400
 800063c:	20000024 	.word	0x20000024

08000640 <EXTI4_IRQHandler>:

/* EXTI4 */
void EXTI4_IRQHandler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	//clear the Pending Register by writing a ‘1’ into the bit.
	SET_BIT(EXTI->PR,EXTI4);
 8000644:	4b05      	ldr	r3, [pc, #20]	; (800065c <EXTI4_IRQHandler+0x1c>)
 8000646:	695b      	ldr	r3, [r3, #20]
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <EXTI4_IRQHandler+0x1c>)
 800064a:	f043 0310 	orr.w	r3, r3, #16
 800064e:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[EXTI4]();
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <EXTI4_IRQHandler+0x20>)
 8000652:	691b      	ldr	r3, [r3, #16]
 8000654:	4798      	blx	r3
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40010400 	.word	0x40010400
 8000660:	20000024 	.word	0x20000024

08000664 <EXTI9_5_IRQHandler>:

/* EXTI9_5 */
void EXTI9_5_IRQHandler(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	//clear the Pending Register by writing a ‘1’ into the bit.
	if(EXTI->PR & GPIO_PIN_5)
 8000668:	4b26      	ldr	r3, [pc, #152]	; (8000704 <EXTI9_5_IRQHandler+0xa0>)
 800066a:	695b      	ldr	r3, [r3, #20]
 800066c:	f003 0320 	and.w	r3, r3, #32
 8000670:	2b00      	cmp	r3, #0
 8000672:	d008      	beq.n	8000686 <EXTI9_5_IRQHandler+0x22>
	{
		SET_BIT(EXTI->PR,EXTI5);
 8000674:	4b23      	ldr	r3, [pc, #140]	; (8000704 <EXTI9_5_IRQHandler+0xa0>)
 8000676:	695b      	ldr	r3, [r3, #20]
 8000678:	4a22      	ldr	r2, [pc, #136]	; (8000704 <EXTI9_5_IRQHandler+0xa0>)
 800067a:	f043 0320 	orr.w	r3, r3, #32
 800067e:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI5]();
 8000680:	4b21      	ldr	r3, [pc, #132]	; (8000708 <EXTI9_5_IRQHandler+0xa4>)
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_6)
 8000686:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <EXTI9_5_IRQHandler+0xa0>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800068e:	2b00      	cmp	r3, #0
 8000690:	d008      	beq.n	80006a4 <EXTI9_5_IRQHandler+0x40>
	{
		SET_BIT(EXTI->PR,EXTI6);
 8000692:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <EXTI9_5_IRQHandler+0xa0>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	4a1b      	ldr	r2, [pc, #108]	; (8000704 <EXTI9_5_IRQHandler+0xa0>)
 8000698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800069c:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI6]();
 800069e:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <EXTI9_5_IRQHandler+0xa4>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_7)
 80006a4:	4b17      	ldr	r3, [pc, #92]	; (8000704 <EXTI9_5_IRQHandler+0xa0>)
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d008      	beq.n	80006c2 <EXTI9_5_IRQHandler+0x5e>
	{
		SET_BIT(EXTI->PR,EXTI7);
 80006b0:	4b14      	ldr	r3, [pc, #80]	; (8000704 <EXTI9_5_IRQHandler+0xa0>)
 80006b2:	695b      	ldr	r3, [r3, #20]
 80006b4:	4a13      	ldr	r2, [pc, #76]	; (8000704 <EXTI9_5_IRQHandler+0xa0>)
 80006b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ba:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI7]();
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <EXTI9_5_IRQHandler+0xa4>)
 80006be:	69db      	ldr	r3, [r3, #28]
 80006c0:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_8)
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <EXTI9_5_IRQHandler+0xa0>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d008      	beq.n	80006e0 <EXTI9_5_IRQHandler+0x7c>
	{
		SET_BIT(EXTI->PR,EXTI8);
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <EXTI9_5_IRQHandler+0xa0>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	4a0c      	ldr	r2, [pc, #48]	; (8000704 <EXTI9_5_IRQHandler+0xa0>)
 80006d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006d8:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI8]();
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <EXTI9_5_IRQHandler+0xa4>)
 80006dc:	6a1b      	ldr	r3, [r3, #32]
 80006de:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_9)
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <EXTI9_5_IRQHandler+0xa0>)
 80006e2:	695b      	ldr	r3, [r3, #20]
 80006e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d008      	beq.n	80006fe <EXTI9_5_IRQHandler+0x9a>
	{
		SET_BIT(EXTI->PR,EXTI9);
 80006ec:	4b05      	ldr	r3, [pc, #20]	; (8000704 <EXTI9_5_IRQHandler+0xa0>)
 80006ee:	695b      	ldr	r3, [r3, #20]
 80006f0:	4a04      	ldr	r2, [pc, #16]	; (8000704 <EXTI9_5_IRQHandler+0xa0>)
 80006f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006f6:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI9]();
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <EXTI9_5_IRQHandler+0xa4>)
 80006fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006fc:	4798      	blx	r3
	}
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40010400 	.word	0x40010400
 8000708:	20000024 	.word	0x20000024

0800070c <EXTI15_10_IRQHandler>:

/* EXTI15_10 */
void EXTI15_10_IRQHandler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	//clear the Pending Register by writing a ‘1’ into the bit.
	if(EXTI->PR & GPIO_PIN_10)
 8000710:	4b2d      	ldr	r3, [pc, #180]	; (80007c8 <EXTI15_10_IRQHandler+0xbc>)
 8000712:	695b      	ldr	r3, [r3, #20]
 8000714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000718:	2b00      	cmp	r3, #0
 800071a:	d008      	beq.n	800072e <EXTI15_10_IRQHandler+0x22>
	{
		SET_BIT(EXTI->PR,EXTI10);
 800071c:	4b2a      	ldr	r3, [pc, #168]	; (80007c8 <EXTI15_10_IRQHandler+0xbc>)
 800071e:	695b      	ldr	r3, [r3, #20]
 8000720:	4a29      	ldr	r2, [pc, #164]	; (80007c8 <EXTI15_10_IRQHandler+0xbc>)
 8000722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000726:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI10]();
 8000728:	4b28      	ldr	r3, [pc, #160]	; (80007cc <EXTI15_10_IRQHandler+0xc0>)
 800072a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800072c:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_11)
 800072e:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <EXTI15_10_IRQHandler+0xbc>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000736:	2b00      	cmp	r3, #0
 8000738:	d008      	beq.n	800074c <EXTI15_10_IRQHandler+0x40>
	{
		SET_BIT(EXTI->PR,EXTI11);
 800073a:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <EXTI15_10_IRQHandler+0xbc>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	4a22      	ldr	r2, [pc, #136]	; (80007c8 <EXTI15_10_IRQHandler+0xbc>)
 8000740:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000744:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI11]();
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <EXTI15_10_IRQHandler+0xc0>)
 8000748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800074a:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_12)
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <EXTI15_10_IRQHandler+0xbc>)
 800074e:	695b      	ldr	r3, [r3, #20]
 8000750:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000754:	2b00      	cmp	r3, #0
 8000756:	d008      	beq.n	800076a <EXTI15_10_IRQHandler+0x5e>
	{
		SET_BIT(EXTI->PR,EXTI12);
 8000758:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <EXTI15_10_IRQHandler+0xbc>)
 800075a:	695b      	ldr	r3, [r3, #20]
 800075c:	4a1a      	ldr	r2, [pc, #104]	; (80007c8 <EXTI15_10_IRQHandler+0xbc>)
 800075e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000762:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI12]();
 8000764:	4b19      	ldr	r3, [pc, #100]	; (80007cc <EXTI15_10_IRQHandler+0xc0>)
 8000766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000768:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_13)
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <EXTI15_10_IRQHandler+0xbc>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d008      	beq.n	8000788 <EXTI15_10_IRQHandler+0x7c>
	{
		SET_BIT(EXTI->PR,EXTI13);
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <EXTI15_10_IRQHandler+0xbc>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	4a13      	ldr	r2, [pc, #76]	; (80007c8 <EXTI15_10_IRQHandler+0xbc>)
 800077c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000780:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI13]();
 8000782:	4b12      	ldr	r3, [pc, #72]	; (80007cc <EXTI15_10_IRQHandler+0xc0>)
 8000784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000786:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_14)
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <EXTI15_10_IRQHandler+0xbc>)
 800078a:	695b      	ldr	r3, [r3, #20]
 800078c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000790:	2b00      	cmp	r3, #0
 8000792:	d008      	beq.n	80007a6 <EXTI15_10_IRQHandler+0x9a>
	{
		SET_BIT(EXTI->PR,EXTI14);
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <EXTI15_10_IRQHandler+0xbc>)
 8000796:	695b      	ldr	r3, [r3, #20]
 8000798:	4a0b      	ldr	r2, [pc, #44]	; (80007c8 <EXTI15_10_IRQHandler+0xbc>)
 800079a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079e:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI14]();
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <EXTI15_10_IRQHandler+0xc0>)
 80007a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007a4:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_15)
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <EXTI15_10_IRQHandler+0xbc>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d008      	beq.n	80007c4 <EXTI15_10_IRQHandler+0xb8>
	{
		SET_BIT(EXTI->PR,EXTI15);
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <EXTI15_10_IRQHandler+0xbc>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <EXTI15_10_IRQHandler+0xbc>)
 80007b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007bc:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI15]();
 80007be:	4b03      	ldr	r3, [pc, #12]	; (80007cc <EXTI15_10_IRQHandler+0xc0>)
 80007c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007c2:	4798      	blx	r3
	}
}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40010400 	.word	0x40010400
 80007cc:	20000024 	.word	0x20000024

080007d0 <Get_PIN_Position>:
 * @param [in] 	-PinNumber: Set PIN number according to @ref GPIO_PINs_define.
 * @retval 		-it return the position of the PIN
 * Note			-none
================================================================**/
uint8_t Get_PIN_Position(uint16_t PIN_Number)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	80fb      	strh	r3, [r7, #6]
	switch(PIN_Number)
 80007da:	88fb      	ldrh	r3, [r7, #6]
 80007dc:	2b80      	cmp	r3, #128	; 0x80
 80007de:	d042      	beq.n	8000866 <Get_PIN_Position+0x96>
 80007e0:	2b80      	cmp	r3, #128	; 0x80
 80007e2:	dc11      	bgt.n	8000808 <Get_PIN_Position+0x38>
 80007e4:	2b08      	cmp	r3, #8
 80007e6:	d036      	beq.n	8000856 <Get_PIN_Position+0x86>
 80007e8:	2b08      	cmp	r3, #8
 80007ea:	dc06      	bgt.n	80007fa <Get_PIN_Position+0x2a>
 80007ec:	2b02      	cmp	r3, #2
 80007ee:	d02e      	beq.n	800084e <Get_PIN_Position+0x7e>
 80007f0:	2b04      	cmp	r3, #4
 80007f2:	d02e      	beq.n	8000852 <Get_PIN_Position+0x82>
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d028      	beq.n	800084a <Get_PIN_Position+0x7a>
 80007f8:	e037      	b.n	800086a <Get_PIN_Position+0x9a>
 80007fa:	2b20      	cmp	r3, #32
 80007fc:	d02f      	beq.n	800085e <Get_PIN_Position+0x8e>
 80007fe:	2b40      	cmp	r3, #64	; 0x40
 8000800:	d02f      	beq.n	8000862 <Get_PIN_Position+0x92>
 8000802:	2b10      	cmp	r3, #16
 8000804:	d029      	beq.n	800085a <Get_PIN_Position+0x8a>
 8000806:	e030      	b.n	800086a <Get_PIN_Position+0x9a>
 8000808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800080c:	d023      	beq.n	8000856 <Get_PIN_Position+0x86>
 800080e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000812:	dc09      	bgt.n	8000828 <Get_PIN_Position+0x58>
 8000814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000818:	d019      	beq.n	800084e <Get_PIN_Position+0x7e>
 800081a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800081e:	d018      	beq.n	8000852 <Get_PIN_Position+0x82>
 8000820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000824:	d011      	beq.n	800084a <Get_PIN_Position+0x7a>
 8000826:	e020      	b.n	800086a <Get_PIN_Position+0x9a>
 8000828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800082c:	d017      	beq.n	800085e <Get_PIN_Position+0x8e>
 800082e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000832:	dc03      	bgt.n	800083c <Get_PIN_Position+0x6c>
 8000834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000838:	d00f      	beq.n	800085a <Get_PIN_Position+0x8a>
 800083a:	e016      	b.n	800086a <Get_PIN_Position+0x9a>
 800083c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000840:	d00f      	beq.n	8000862 <Get_PIN_Position+0x92>
 8000842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000846:	d00e      	beq.n	8000866 <Get_PIN_Position+0x96>
 8000848:	e00f      	b.n	800086a <Get_PIN_Position+0x9a>
	{
	case GPIO_PIN_0:
	case GPIO_PIN_8:
		return 0;
 800084a:	2300      	movs	r3, #0
 800084c:	e00e      	b.n	800086c <Get_PIN_Position+0x9c>
		break;

	case GPIO_PIN_1:
	case GPIO_PIN_9:
		return 4;
 800084e:	2304      	movs	r3, #4
 8000850:	e00c      	b.n	800086c <Get_PIN_Position+0x9c>
		break;

	case GPIO_PIN_2:
	case GPIO_PIN_10:
		return 8;
 8000852:	2308      	movs	r3, #8
 8000854:	e00a      	b.n	800086c <Get_PIN_Position+0x9c>
		break;

	case GPIO_PIN_3:
	case GPIO_PIN_11:
		return 12;
 8000856:	230c      	movs	r3, #12
 8000858:	e008      	b.n	800086c <Get_PIN_Position+0x9c>
		break;

	case GPIO_PIN_4:
	case GPIO_PIN_12:
		return 16;
 800085a:	2310      	movs	r3, #16
 800085c:	e006      	b.n	800086c <Get_PIN_Position+0x9c>
		break;

	case GPIO_PIN_5:
	case GPIO_PIN_13:
		return 20;
 800085e:	2314      	movs	r3, #20
 8000860:	e004      	b.n	800086c <Get_PIN_Position+0x9c>
		break;

	case GPIO_PIN_6:
	case GPIO_PIN_14:
		return 24;
 8000862:	2318      	movs	r3, #24
 8000864:	e002      	b.n	800086c <Get_PIN_Position+0x9c>
		break;

	case GPIO_PIN_7:
	case GPIO_PIN_15:
		return 28;
 8000866:	231c      	movs	r3, #28
 8000868:	e000      	b.n	800086c <Get_PIN_Position+0x9c>
		break;
	}

	return 0;
 800086a:	2300      	movs	r3, #0
}
 800086c:	4618      	mov	r0, r3
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr

08000876 <MCAL_GPIO_Init>:
 * @retval 		-none
 * Note			-STM32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 but LQFP48 Package has only GPIO A,B Part of C,D exported as external PINs from the MCU
================================================================**/
void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PIN_Configuration_t *PIN_Config)
{
 8000876:	b590      	push	{r4, r7, lr}
 8000878:	b085      	sub	sp, #20
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
 800087e:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) configure PINs from 0 >> 7
	// Port configuration register high (GPIOx_CRH) configure PINs from 8 >> 15
	volatile uint32_t *Configuration_Register = NULL;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
	volatile uint8_t pin_configuration;

	//check if Configuration_Register is CRL or CRH
	Configuration_Register = (PIN_Config->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH;
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	2bff      	cmp	r3, #255	; 0xff
 800088a:	d801      	bhi.n	8000890 <MCAL_GPIO_Init+0x1a>
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	e001      	b.n	8000894 <MCAL_GPIO_Init+0x1e>
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3304      	adds	r3, #4
 8000894:	60fb      	str	r3, [r7, #12]

	//Reset CNF0[1:0] MODE0[1:0]
	(*Configuration_Register) &= ~(0xf << Get_PIN_Position(PIN_Config->GPIO_PinNumber));
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff ff98 	bl	80007d0 <Get_PIN_Position>
 80008a0:	4603      	mov	r3, r0
 80008a2:	461a      	mov	r2, r3
 80008a4:	230f      	movs	r3, #15
 80008a6:	4093      	lsls	r3, r2
 80008a8:	43da      	mvns	r2, r3
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	401a      	ands	r2, r3
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	601a      	str	r2, [r3, #0]
	 * ------------------
	 * |  3	| 2 | 1	| 0	|
	 * ------------------
	 */
	//check if PIN is O/P or I/P
	if((PIN_Config->GPIO_PinMODE == GPIO_MODE_OUTPUT_PP) || (PIN_Config->GPIO_PinMODE == GPIO_MODE_OUTPUT_OD) || (PIN_Config->GPIO_PinMODE == GPIO_MODE_OUTPUT_AF_PP) || (PIN_Config->GPIO_PinMODE == GPIO_MODE_OUTPUT_AF_OD))
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	789b      	ldrb	r3, [r3, #2]
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d00b      	beq.n	80008d4 <MCAL_GPIO_Init+0x5e>
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	789b      	ldrb	r3, [r3, #2]
 80008c0:	2b05      	cmp	r3, #5
 80008c2:	d007      	beq.n	80008d4 <MCAL_GPIO_Init+0x5e>
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	789b      	ldrb	r3, [r3, #2]
 80008c8:	2b06      	cmp	r3, #6
 80008ca:	d003      	beq.n	80008d4 <MCAL_GPIO_Init+0x5e>
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	789b      	ldrb	r3, [r3, #2]
 80008d0:	2b07      	cmp	r3, #7
 80008d2:	d10f      	bne.n	80008f4 <MCAL_GPIO_Init+0x7e>
		 * 00: General purpose output push-pull		--> GPIO_MODE_OUTPUT_PP		>>	0x00000004u
		 * 01: General purpose output Open-drain	--> GPIO_MODE_OUTPUT_OD		>>	0x00000005u
		 * 10: Alternate function output Push-pull	--> GPIO_MODE_OUTPUT_AF_PP	>>	0x00000006u
		 * 11: Alternate function output Open-drain	--> GPIO_MODE_OUTPUT_AF_OD	>>	0x00000007u
		 */
		pin_configuration = ((((PIN_Config->GPIO_PinMODE - 4) << 2) | (PIN_Config->GPIO_PinSPEED)) & 0x0f);
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	789b      	ldrb	r3, [r3, #2]
 80008d8:	3b04      	subs	r3, #4
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	b25a      	sxtb	r2, r3
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	78db      	ldrb	r3, [r3, #3]
 80008e2:	b25b      	sxtb	r3, r3
 80008e4:	4313      	orrs	r3, r2
 80008e6:	b25b      	sxtb	r3, r3
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	f003 030f 	and.w	r3, r3, #15
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	72fb      	strb	r3, [r7, #11]
 80008f2:	e033      	b.n	800095c <MCAL_GPIO_Init+0xe6>
		 * 11: Input with PU or PD	--> GPIO_MODE_INPUT_PU
		 * 		PU: ODR --> 1
		 * 		PD: ODR --> 0
		 */
		//check if PIN is Analog or floating input
		if((PIN_Config->GPIO_PinMODE == GPIO_MODE_ANALOG) || (PIN_Config->GPIO_PinMODE == GPIO_MODE_INPUT_FLO))
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	789b      	ldrb	r3, [r3, #2]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d003      	beq.n	8000904 <MCAL_GPIO_Init+0x8e>
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	789b      	ldrb	r3, [r3, #2]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d108      	bne.n	8000916 <MCAL_GPIO_Init+0xa0>
		{
			pin_configuration = ((((PIN_Config->GPIO_PinMODE) << 2) | (0x0)) & 0x0f);
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	789b      	ldrb	r3, [r3, #2]
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	b2db      	uxtb	r3, r3
 800090c:	f003 030f 	and.w	r3, r3, #15
 8000910:	b2db      	uxtb	r3, r3
 8000912:	72fb      	strb	r3, [r7, #11]
 8000914:	e022      	b.n	800095c <MCAL_GPIO_Init+0xe6>
		}
		else if((PIN_Config->GPIO_PinMODE == GPIO_MODE_INPUT_AF)) //Alternative I/P
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	789b      	ldrb	r3, [r3, #2]
 800091a:	2b08      	cmp	r3, #8
 800091c:	d102      	bne.n	8000924 <MCAL_GPIO_Init+0xae>
		{
			pin_configuration = ((((GPIO_MODE_INPUT_FLO) << 2) | (0x0)) & 0x0f);
 800091e:	2304      	movs	r3, #4
 8000920:	72fb      	strb	r3, [r7, #11]
 8000922:	e01b      	b.n	800095c <MCAL_GPIO_Init+0xe6>
		}
		else //input PU or PD
		{
			pin_configuration = ((((PIN_Config->GPIO_PinMODE) << 2) | (0x0)) & 0x0f);
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	789b      	ldrb	r3, [r3, #2]
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	b2db      	uxtb	r3, r3
 800092c:	f003 030f 	and.w	r3, r3, #15
 8000930:	b2db      	uxtb	r3, r3
 8000932:	72fb      	strb	r3, [r7, #11]
			/*
			 * Table 20. Port bit configuration table
			 * input PU >> PxODR register = 1
			 * input PD >> PxODR register = 0
			 */
			if(PIN_Config->GPIO_PinMODE == GPIO_MODE_INPUT_PU) //I/P pull up
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	789b      	ldrb	r3, [r3, #2]
 8000938:	2b02      	cmp	r3, #2
 800093a:	d107      	bne.n	800094c <MCAL_GPIO_Init+0xd6>
			{
				GPIOx->ODR |= ((uint32_t)(PIN_Config->GPIO_PinNumber));
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	683a      	ldr	r2, [r7, #0]
 8000942:	8812      	ldrh	r2, [r2, #0]
 8000944:	431a      	orrs	r2, r3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	e007      	b.n	800095c <MCAL_GPIO_Init+0xe6>
			}
			else //I/P pull down
			{
				GPIOx->ODR &= ~((uint32_t)(PIN_Config->GPIO_PinNumber));
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	68da      	ldr	r2, [r3, #12]
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	43db      	mvns	r3, r3
 8000956:	401a      	ands	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	60da      	str	r2, [r3, #12]
			}
		}
	}

	//Put the values of CNF & MODE in CRL or CRH
	(*Configuration_Register) |= (pin_configuration << Get_PIN_Position(PIN_Config->GPIO_PinNumber));
 800095c:	7afb      	ldrb	r3, [r7, #11]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	461c      	mov	r4, r3
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff ff32 	bl	80007d0 <Get_PIN_Position>
 800096c:	4603      	mov	r3, r0
 800096e:	fa04 f203 	lsl.w	r2, r4, r3
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	431a      	orrs	r2, r3
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	601a      	str	r2, [r3, #0]
}
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	bd90      	pop	{r4, r7, pc}

08000984 <MCAL_GPIO_WritePin>:
 * @param [in] 	-Value: The value that will write to PIN (Two Values based on @ref GPIO_PIN_state >> SET or RESET).
 * @retval 		-none
 * Note			-none
================================================================**/
void MCAL_GPIO_WritePin (GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t Value)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	807b      	strh	r3, [r7, #2]
 8000990:	4613      	mov	r3, r2
 8000992:	707b      	strb	r3, [r7, #1]
	 * Bits 15:0 BRy: Port x Reset bit y (y= 0 .. 15)
	 * These bits are write-only and can be accessed in Word mode only.
	 * 0: No action on the corresponding ODRx bit
	 * 1: Reset the corresponding ODRx bit
	 */
	if(Value == GPIO_PIN_SET)
 8000994:	787b      	ldrb	r3, [r7, #1]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d103      	bne.n	80009a2 <MCAL_GPIO_WritePin+0x1e>
	{
		GPIOx->BSRR = (uint32_t)PinNumber;
 800099a:	887a      	ldrh	r2, [r7, #2]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	611a      	str	r2, [r3, #16]
	}
	else if(Value == GPIO_PIN_RESET)
	{
		GPIOx->BRR = (uint32_t)PinNumber;
	}
}
 80009a0:	e005      	b.n	80009ae <MCAL_GPIO_WritePin+0x2a>
	else if(Value == GPIO_PIN_RESET)
 80009a2:	787b      	ldrb	r3, [r7, #1]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d102      	bne.n	80009ae <MCAL_GPIO_WritePin+0x2a>
		GPIOx->BRR = (uint32_t)PinNumber;
 80009a8:	887a      	ldrh	r2, [r7, #2]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	615a      	str	r2, [r3, #20]
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr

080009b8 <TaskA_Fun>:
//			"MRSNE R0, PSP \n\t"
//			"B OS_SVC_Services");
//}

void TaskA_Fun(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80009bc:	2201      	movs	r2, #1
 80009be:	2101      	movs	r1, #1
 80009c0:	4804      	ldr	r0, [pc, #16]	; (80009d4 <TaskA_Fun+0x1c>)
 80009c2:	f7ff ffdf 	bl	8000984 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2102      	movs	r1, #2
 80009ca:	4802      	ldr	r0, [pc, #8]	; (80009d4 <TaskA_Fun+0x1c>)
 80009cc:	f7ff ffda 	bl	8000984 <MCAL_GPIO_WritePin>
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40010c00 	.word	0x40010c00

080009d8 <TaskB_Fun>:

void TaskB_Fun(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 80009dc:	2201      	movs	r2, #1
 80009de:	2102      	movs	r1, #2
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <TaskB_Fun+0x1c>)
 80009e2:	f7ff ffcf 	bl	8000984 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2101      	movs	r1, #1
 80009ea:	4802      	ldr	r0, [pc, #8]	; (80009f4 <TaskB_Fun+0x1c>)
 80009ec:	f7ff ffca 	bl	8000984 <MCAL_GPIO_WritePin>
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40010c00 	.word	0x40010c00

080009f8 <OS_SVC_Set_First_Task>:

void OS_SVC_Set_First_Task(int SVC_ID)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	switch(SVC_ID)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d002      	beq.n	8000a0c <OS_SVC_Set_First_Task+0x14>
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	d002      	beq.n	8000a10 <OS_SVC_Set_First_Task+0x18>

	case 2:	//TaskB
		__asm("SVC #2");
		break;
	}
}
 8000a0a:	e003      	b.n	8000a14 <OS_SVC_Set_First_Task+0x1c>
		__asm("SVC #1");
 8000a0c:	df01      	svc	1
		break;
 8000a0e:	e001      	b.n	8000a14 <OS_SVC_Set_First_Task+0x1c>
		__asm("SVC #2");
 8000a10:	df02      	svc	2
		break;
 8000a12:	bf00      	nop
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
	...

08000a20 <PendSV_Handler>:

void PendSV_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	if(TaskA_Flag == 1)		//switch to TaskA
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <PendSV_Handler+0x58>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d10f      	bne.n	8000a4c <PendSV_Handler+0x2c>
	{
		OS_Set_PSP_Val(_S_PSP_TaskA);
 8000a2c:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <PendSV_Handler+0x5c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f380 8809 	msr	PSP, r0
		OS_Set_SP_shadowto_PSP;
 8000a36:	f3ef 8014 	mrs	r0, CONTROL
 8000a3a:	f04f 0102 	mov.w	r1, #2
 8000a3e:	ea40 0001 	orr.w	r0, r0, r1
 8000a42:	f380 8814 	msr	CONTROL, r0
		TaskA_Fun();
 8000a46:	f7ff ffb7 	bl	80009b8 <TaskA_Fun>
	}
	else
	{

	}
}
 8000a4a:	e012      	b.n	8000a72 <PendSV_Handler+0x52>
	else if(TaskB_Flag == 1)	//switch to TaskB
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <PendSV_Handler+0x60>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d10e      	bne.n	8000a72 <PendSV_Handler+0x52>
		OS_Set_PSP_Val(_S_PSP_TaskB);
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <PendSV_Handler+0x64>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f380 8809 	msr	PSP, r0
		OS_Set_SP_shadowto_PSP;
 8000a5e:	f3ef 8014 	mrs	r0, CONTROL
 8000a62:	f04f 0102 	mov.w	r1, #2
 8000a66:	ea40 0001 	orr.w	r0, r0, r1
 8000a6a:	f380 8814 	msr	CONTROL, r0
		TaskB_Fun();
 8000a6e:	f7ff ffb3 	bl	80009d8 <TaskB_Fun>
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000021 	.word	0x20000021
 8000a7c:	20000068 	.word	0x20000068
 8000a80:	20000022 	.word	0x20000022
 8000a84:	20000070 	.word	0x20000070

08000a88 <Main_OS>:

void Main_OS(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	/* OS Stack */
	_E_MSP = (_S_MSP - OS_Stack_Size);
 8000a8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <Main_OS+0x40>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000a94:	4a0d      	ldr	r2, [pc, #52]	; (8000acc <Main_OS+0x44>)
 8000a96:	6013      	str	r3, [r2, #0]

	/* TaskA Stack */
	_S_PSP_TaskA = (_E_MSP - 8);
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <Main_OS+0x44>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	3b08      	subs	r3, #8
 8000a9e:	4a0c      	ldr	r2, [pc, #48]	; (8000ad0 <Main_OS+0x48>)
 8000aa0:	6013      	str	r3, [r2, #0]
	_E_PSP_TaskA = (_S_PSP_TaskA - TaskA_Stack_Size);
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <Main_OS+0x48>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	3b64      	subs	r3, #100	; 0x64
 8000aa8:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <Main_OS+0x4c>)
 8000aaa:	6013      	str	r3, [r2, #0]

	/* TaskB Stack */
	_S_PSP_TaskB = (_E_PSP_TaskA - 8);
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <Main_OS+0x4c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	3b08      	subs	r3, #8
 8000ab2:	4a09      	ldr	r2, [pc, #36]	; (8000ad8 <Main_OS+0x50>)
 8000ab4:	6013      	str	r3, [r2, #0]
	_E_PSP_TaskB = (_S_PSP_TaskB - TaskB_Stack_Size);
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <Main_OS+0x50>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	3b64      	subs	r3, #100	; 0x64
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <Main_OS+0x54>)
 8000abe:	6013      	str	r3, [r2, #0]

	OS_SVC_Set_First_Task(TaskA);
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f7ff ff99 	bl	80009f8 <OS_SVC_Set_First_Task>

	while(1)
 8000ac6:	e7fe      	b.n	8000ac6 <Main_OS+0x3e>
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	20000060 	.word	0x20000060
 8000ad0:	20000068 	.word	0x20000068
 8000ad4:	20000064 	.word	0x20000064
 8000ad8:	20000070 	.word	0x20000070
 8000adc:	2000006c 	.word	0x2000006c

08000ae0 <EXTI9_CallBack>:
}



void EXTI9_CallBack(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
	/* rise the flag of the task that its own order */
	if(IRQ_Flag == 0)
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <EXTI9_CallBack+0x50>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d109      	bne.n	8000b00 <EXTI9_CallBack+0x20>
	{
		TaskA_Flag = 1;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <EXTI9_CallBack+0x54>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	701a      	strb	r2, [r3, #0]
		TaskB_Flag = 0;
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <EXTI9_CallBack+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	701a      	strb	r2, [r3, #0]
		IRQ_Flag = 1;
 8000af8:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <EXTI9_CallBack+0x50>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	701a      	strb	r2, [r3, #0]
 8000afe:	e00c      	b.n	8000b1a <EXTI9_CallBack+0x3a>
	}
	else if(IRQ_Flag == 1)
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <EXTI9_CallBack+0x50>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d108      	bne.n	8000b1a <EXTI9_CallBack+0x3a>
	{
		TaskB_Flag = 1;
 8000b08:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <EXTI9_CallBack+0x58>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]
		TaskA_Flag = 0;
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <EXTI9_CallBack+0x54>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	701a      	strb	r2, [r3, #0]
		IRQ_Flag = 0;
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <EXTI9_CallBack+0x50>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]
	{

	}

	/* set PendSV */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <EXTI9_CallBack+0x5c>)
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <EXTI9_CallBack+0x5c>)
 8000b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b24:	6053      	str	r3, [r2, #4]
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	20000020 	.word	0x20000020
 8000b34:	20000021 	.word	0x20000021
 8000b38:	20000022 	.word	0x20000022
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <main>:

int main(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
	RCC_AFIO_CLK_EN();
 8000b46:	4b23      	ldr	r3, [pc, #140]	; (8000bd4 <main+0x94>)
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	4a22      	ldr	r2, [pc, #136]	; (8000bd4 <main+0x94>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000b52:	4b20      	ldr	r3, [pc, #128]	; (8000bd4 <main+0x94>)
 8000b54:	699b      	ldr	r3, [r3, #24]
 8000b56:	4a1f      	ldr	r2, [pc, #124]	; (8000bd4 <main+0x94>)
 8000b58:	f043 0308 	orr.w	r3, r3, #8
 8000b5c:	6193      	str	r3, [r2, #24]

	/*SWITCH_CPU_ACCESS_LEVEL(unprivileged);*/

	/* Toggle pin0 @ PortB in TaskA */
	GPIO_PIN_Configuration_t pin_cfg;
	pin_cfg.GPIO_PinNumber = GPIO_PIN_0;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	82bb      	strh	r3, [r7, #20]
	pin_cfg.GPIO_PinMODE = GPIO_MODE_OUTPUT_PP;
 8000b62:	2304      	movs	r3, #4
 8000b64:	75bb      	strb	r3, [r7, #22]
	pin_cfg.GPIO_PinSPEED = GPIO_SPEED_10MHz;
 8000b66:	2301      	movs	r3, #1
 8000b68:	75fb      	strb	r3, [r7, #23]
	MCAL_GPIO_Init(GPIOB, &pin_cfg);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4819      	ldr	r0, [pc, #100]	; (8000bd8 <main+0x98>)
 8000b72:	f7ff fe80 	bl	8000876 <MCAL_GPIO_Init>

	/* Toggle pin1 @ PortB in TaskB */
	pin_cfg.GPIO_PinNumber = GPIO_PIN_1;
 8000b76:	2302      	movs	r3, #2
 8000b78:	82bb      	strh	r3, [r7, #20]
	pin_cfg.GPIO_PinMODE = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2304      	movs	r3, #4
 8000b7c:	75bb      	strb	r3, [r7, #22]
	pin_cfg.GPIO_PinSPEED = GPIO_SPEED_10MHz;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	75fb      	strb	r3, [r7, #23]
	MCAL_GPIO_Init(GPIOB, &pin_cfg);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	4813      	ldr	r0, [pc, #76]	; (8000bd8 <main+0x98>)
 8000b8a:	f7ff fe74 	bl	8000876 <MCAL_GPIO_Init>

	EXTI_Configuration_t EXTI_config;
	EXTI_config.EXTI_PIN = EXTI9PB9;
 8000b8e:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <main+0x9c>)
 8000b90:	463b      	mov	r3, r7
 8000b92:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b94:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_config.EXTI_Trigger_Case = EXTI_Trigger_FALLING;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	733b      	strb	r3, [r7, #12]
	EXTI_config.PF_IRQ_CallBack = EXTI9_CallBack;
 8000b9c:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <main+0xa0>)
 8000b9e:	613b      	str	r3, [r7, #16]
	EXTI_config.EXTI_IRQ_EN = EXTI_IRQ_ENABLE;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	737b      	strb	r3, [r7, #13]
	MCAL_EXTI_GPIO_Init(&EXTI_config);
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fcf6 	bl	8000598 <MCAL_EXTI_GPIO_Init>

	IRQ_Flag = 1;
 8000bac:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <main+0xa4>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	701a      	strb	r2, [r3, #0]
	TaskA_Flag = 1;
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <main+0xa8>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	701a      	strb	r2, [r3, #0]
	TaskB_Flag = 0;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <main+0xac>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]

	Main_OS();
 8000bbe:	f7ff ff63 	bl	8000a88 <Main_OS>
	//	res = OS_SVC_Set(5, 2, 3);

	/* Loop forever */
	while(1)
	{
		if(IRQ_Flag)
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <main+0xa4>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d0fb      	beq.n	8000bc2 <main+0x82>
		{
			IRQ_Flag = 0;
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <main+0xa4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	701a      	strb	r2, [r3, #0]
		if(IRQ_Flag)
 8000bd0:	e7f7      	b.n	8000bc2 <main+0x82>
 8000bd2:	bf00      	nop
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	40010c00 	.word	0x40010c00
 8000bdc:	08000ca4 	.word	0x08000ca4
 8000be0:	08000ae1 	.word	0x08000ae1
 8000be4:	20000020 	.word	0x20000020
 8000be8:	20000021 	.word	0x20000021
 8000bec:	20000022 	.word	0x20000022

08000bf0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bf0:	480d      	ldr	r0, [pc, #52]	; (8000c28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bf2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bf4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf8:	480c      	ldr	r0, [pc, #48]	; (8000c2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bfa:	490d      	ldr	r1, [pc, #52]	; (8000c30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <LoopForever+0xe>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c00:	e002      	b.n	8000c08 <LoopCopyDataInit>

08000c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c06:	3304      	adds	r3, #4

08000c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c0c:	d3f9      	bcc.n	8000c02 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c10:	4c0a      	ldr	r4, [pc, #40]	; (8000c3c <LoopForever+0x16>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c14:	e001      	b.n	8000c1a <LoopFillZerobss>

08000c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c18:	3204      	adds	r2, #4

08000c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c1c:	d3fb      	bcc.n	8000c16 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c1e:	f000 f811 	bl	8000c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c22:	f7ff ff8d 	bl	8000b40 <main>

08000c26 <LoopForever>:

LoopForever:
    b LoopForever
 8000c26:	e7fe      	b.n	8000c26 <LoopForever>
  ldr   r0, =_estack
 8000c28:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c30:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000c34:	08000cb8 	.word	0x08000cb8
  ldr r2, =_sbss
 8000c38:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000c3c:	20000074 	.word	0x20000074

08000c40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c40:	e7fe      	b.n	8000c40 <ADC1_2_IRQHandler>
	...

08000c44 <__libc_init_array>:
 8000c44:	b570      	push	{r4, r5, r6, lr}
 8000c46:	2500      	movs	r5, #0
 8000c48:	4e0c      	ldr	r6, [pc, #48]	; (8000c7c <__libc_init_array+0x38>)
 8000c4a:	4c0d      	ldr	r4, [pc, #52]	; (8000c80 <__libc_init_array+0x3c>)
 8000c4c:	1ba4      	subs	r4, r4, r6
 8000c4e:	10a4      	asrs	r4, r4, #2
 8000c50:	42a5      	cmp	r5, r4
 8000c52:	d109      	bne.n	8000c68 <__libc_init_array+0x24>
 8000c54:	f000 f81a 	bl	8000c8c <_init>
 8000c58:	2500      	movs	r5, #0
 8000c5a:	4e0a      	ldr	r6, [pc, #40]	; (8000c84 <__libc_init_array+0x40>)
 8000c5c:	4c0a      	ldr	r4, [pc, #40]	; (8000c88 <__libc_init_array+0x44>)
 8000c5e:	1ba4      	subs	r4, r4, r6
 8000c60:	10a4      	asrs	r4, r4, #2
 8000c62:	42a5      	cmp	r5, r4
 8000c64:	d105      	bne.n	8000c72 <__libc_init_array+0x2e>
 8000c66:	bd70      	pop	{r4, r5, r6, pc}
 8000c68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c6c:	4798      	blx	r3
 8000c6e:	3501      	adds	r5, #1
 8000c70:	e7ee      	b.n	8000c50 <__libc_init_array+0xc>
 8000c72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c76:	4798      	blx	r3
 8000c78:	3501      	adds	r5, #1
 8000c7a:	e7f2      	b.n	8000c62 <__libc_init_array+0x1e>
 8000c7c:	08000cb0 	.word	0x08000cb0
 8000c80:	08000cb0 	.word	0x08000cb0
 8000c84:	08000cb0 	.word	0x08000cb0
 8000c88:	08000cb4 	.word	0x08000cb4

08000c8c <_init>:
 8000c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c8e:	bf00      	nop
 8000c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c92:	bc08      	pop	{r3}
 8000c94:	469e      	mov	lr, r3
 8000c96:	4770      	bx	lr

08000c98 <_fini>:
 8000c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c9a:	bf00      	nop
 8000c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c9e:	bc08      	pop	{r3}
 8000ca0:	469e      	mov	lr, r3
 8000ca2:	4770      	bx	lr
